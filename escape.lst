#[1]   escape.asm
    2                     
#[2]   arg.mac
    3                             .include "arg.mac"
    1           0000      ARG_NONE        .equ 0
    2           0001      ARG_REG         .equ 1
    3           0002      ARG_IMMED       .equ 2
    4           0003      ARG_ABS         .equ 3
    5           0003      ARG_ABSOLUTE    .equ 3
    6           0004      ARG_INDIRECT    .equ 4
    7           0005      ARG_STRING      .equ 5
    8           0006      ARG_LABEL       .equ 6
#[1]   escape.asm
#[2]   common.mac
    4                             .include "common.mac"
    1                     ; mov src, dst
    2                     ; dst := [src]
    3                     mova    .macro
    4                             sta \1
    5                             .endm
    6                     movx    .macro
    7                             stx \1
    8                             .endm
    9                     movy    .macro
   10                             sty \1
   11                             .endm
   12                     mov     .macro
   13                             .if \?1 = ARG_REG
   14                             st\1 \2
   15                             .else
   16                             lda \1
   17                             sta \2
   18                             .endif
   19                             .endm
   20                     
   21                     ; mov16 src16, dst16
   22                     ; dst16 := [src16]
   23                     
   24                     ; mov16 #src16, dst16
   25                     ; dst16 := src16
   26                     mov16   .macro
   27                             .if \?1 = ARG_IMMED
   28                             mov #low(\1), \2
   29                             mov #high(\1), \2+1
   30                             .else
   31                             mov \1, \2
   32                             mov \1+1, \2+1
   33                             .endif
   34                             .endm
   35                     
   36                     ; mov16 src16, dst16
   37                     ; dst16 := [src16 + x]
   38                     mov16sx .macro
   39                             lda \1,x
   40                             sta \2
   41                             lda \1+1,x
   42                             sta \2+1
   43                             .endm
   44                     
   45                     
   46                     ; add16 dst16, src16
   47                     ; dst16 := [dst16] + [src16]
   48                     
   49                     ; add16 dst16, #val16
   50                     ; dst16 := [dst16] + val16
   51                     add16   .macro
   52                             clc
   53                             .if \?2 = ARG_IMMED
   54                             lda \1
   55                             adc #low(\2)
   56                             sta \1
   57                             lda \1+1
   58                             adc #high(\2)
   59                             sta \1+1
   60                             .else
   61                             lda \1
   62                             adc \2
   63                             sta \1
   64                             lda \1+1
   65                             adc \2+1
   66                             sta \1+1
   67                             .endif
   68                             .endm
   69                     
   70                     ; inc16 dst16
   71                     ; dst16 := [dst16] + 1
   72                     inc16   .macro
   73                             add16 \1, #1
   74                             .endm
   75                     
   76                     ; asr16
   77                     asl16   .macro
   78                             asl \1+1
   79                             rol \1
   80                             .endm
   81                     
   82                     ;; converts pascal style strings to C style
   83                     ;; src, dst, size
   84                     strcpyp2c       .macro
   85                             ldy     #0
   86                             ldx     \3
   87                             beq     .endloop\@
   88                     .loop\@:
   89                             mov     [\1], Y, \2, Y
   90                             iny
   91                             dex
   92                             bne     .loop\@
   93                     .endloop\@:
   94                             mov     #0, \2, Y
   95                             .endm
   96                     
   97           0001      debug .equ 1
   98                     debug_p .macro
   99                             .if     debug
  100                             stx     debug_tmp
  101                             sta     debug_tmp_2
  102                             ldx     #0
  103                     .start\@:
  104                             lda     \1, X
  105                             beq     .done\@
  106                             sta     debug_str
  107                             inx
  108                             jmp     .start\@
  109                     .done\@:
  110                             lda     #$0a
  111                             sta     debug_str
  112                             ldx     debug_tmp
  113                             lda     debug_tmp_2
  114                             .endif
  115                             .endm
  116                     
  117                     
  118                     ; some ppu stuff
  119           3F00      bgpal   .equ $3f00
  120           2020      bgnam   .equ $2020
  121                     
  122                     ppua    .macro
  123                             .if \?1 = ARG_IMMED
  124                             mov #high(\1), $2006
  125                             mov #low(\1), $2006
  126                             .else
  127                             mov \1+1, $2006
  128                             mov \1, $2006
  129                             .endif
  130                             .endm
  131                     
  132                     ppuw    .macro
  133                             mov \1, $2007
  134                             .endm
  135                     
  136                     
  137                     
#[1]   escape.asm
#[2]   tiles.mac
    5                             .include "tiles.mac"
    1                     ;;; macro to set a tile  (tile, pos, off)
    2                             .macro  set_tile
    3                             mov     \3, tile_offset
    4                             mov     \2, tile_pos
    5                             mov16   \1, tile
    6                             jsr     draw_tile
    7                             .endm
#[1]   escape.asm
    6                                     
    7                     ;;; items
    8                             .inesprg 2
    9                             .ineschr 1
   10                             .inesmir 3
   11                             .inesmap 4
   12                     
   13                     
   14           0000              .zp
   15  --:0000            debug_str:      .ds 1
   16  --:0001            debug_num:      .ds 1
   17  --:0002            debug_tmp:      .ds 1
   18  --:0003            debug_tmp_2:    .ds 1
   19                     
   20                             
   21  --:0004            tile_pos: .ds   1
   22  --:0005            tile:   .ds     2
   23  --:0007            tiles:  .ds     180
   24                     
   25  --:00BB            level_num:      .ds     1
   26                             
   27  --:00BC            gx:     .ds     1
   28  --:00BD            gy:     .ds     1
   29  --:00BE            gd:     .ds     1
   30                     
   31  --:00BF            idx16:  .ds     2
   32  --:00C1            tmp:    .ds     1
   33  --:00C2            tmp_2:  .ds     1
   34  --:00C3            tmp_3:  .ds     1
   35  --:00C4            tmp_4:  .ds     1
   36  --:00C5            tmp_5:  .ds     1
   37  --:00C6            tmp16:  .ds     2
   38  --:00C8            tmp16_2: .ds    2
   39  --:00CA            tmp_size: .ds   2
   40  --:00CC            tmp_addr: .ds   2
   41                     
   42  --:00CE            x_scroll: .ds   1
   43                             
   44  --:00CF            level_addr:     .ds     3
   45                     
   46                                     
   47                                     
   48           0200              .bss
   49                     
   50  --:0200            sprite: .ds     256
   51  --:0300            otiles: .ds     180
   52  --:03B4            dests:  .ds     180
   53  --:0468            flags:  .ds     180
   54  --:051C            title:  .ds     36
   55  --:0540            author: .ds     20
   56                                     
   57                     
   58                             
   59                     ;;; initialize
   60           E000              .code
   61           0000              .bank   0
   62           8000              .org    $8000
   63                                     
#[2]   rle.asm
   64                             .include "rle.asm"                      
    1  00:8000            rledecode:
    2           00C1      run     .equ tmp
    3           00C2      size    .equ tmp_2
    4           00C3      bytes   .equ tmp_3
    5           00C4      char    .equ tmp_4
    6                     
    7  00:0000                    debug_p ds1
    8  00:001F                    debug_p ds_tmpaddr
    9  00:803E  AD CC 00          lda     tmp_addr
   10  00:8041  8D 01 00          sta     debug_num
   11  00:8044  AD CD 00          lda     tmp_addr+1
   12  00:8047  8D 01 00          sta     debug_num
   13                             ;; take idx16, read from it and advance it, and store
   14                             ;; result in place pointed by tmp_addr
   15  00:004A                    mov     #180, size      ; size of map
   16  00:804F  A2 00             ldx     #0
   17  00:8051  A0 00             ldy     #0
   18  00:0053                    mov     [idx16], Y, bytes
   19                     
   20  00:0058                    inc16   idx16
   21                     
   22  00:8069            .loop:  
   23                             ;; read a byte to determine run
   24  00:0069                    mov     [idx16], Y, run
   25  00:006E                    inc16   idx16
   26  00:807F  AD C1 00          lda     run
   27  00:8082  D0 03             bne     .run
   28  00:8084  4C 05 81          jmp     .anti_run       ; if 0, anti-run
   29  00:8087            .run:   
   30                             ;; run
   31  00:0087                    debug_p ds_run
   32  00:00A6                    mov     #0, char        ; set char to 0
   33  00:80AB  AD C3 00          lda     bytes           ; check if bytes == 0
   34  00:80AE  F0 16             beq     .in_run_loop    ; skip and write zeros if bytes == 0
   35                     
   36  00:00B0                    mov     [idx16], Y, char ; read a char, since bytes != 0
   37  00:00B5                    inc16   idx16
   38  00:80C6            .in_run_loop:
   39  00:00C6                    debug_p ds_x
   40  00:80E5  8E 01 00          stx     debug_num
   41  00:80E8  8A                txa
   42  00:80E9  A8                tay
   43  00:00EA                    mov     char, [tmp_addr], Y ; write the content of the run
   44  00:80EF  A0 00             ldy     #0
   45  00:80F1  E8                inx
   46  00:80F2  CE C2 00          dec     size
   47  00:80F5  CE C1 00          dec     run
   48  00:80F8  D0 CC             bne     .in_run_loop
   49                     
   50                             ;; done?
   51  00:80FA  AD C2 00          lda     size
   52  00:80FD  D0 03             bne     .loop_trampoline
   53  00:80FF  4C 6D 81          jmp     .done
   54  00:8102            .loop_trampoline:
   55  00:8102  4C 69 80          jmp     .loop
   56                             
   57  00:8105            .anti_run:
   58  00:0105                    debug_p ds_antirun
   59  00:0124                    mov     [idx16], Y, run ; length of this anti-run
   60  00:0129                    inc16   idx16
   61  00:813A            .in_anti_run_loop:
   62  00:813A  B1 BF             lda     [idx16], Y
   63  00:813C  8D 01 00          sta     debug_num
   64  00:813F  8D C4 00          sta     char
   65  00:8142  8A                txa
   66  00:8143  A8                tay
   67  00:8144  AD C4 00          lda     char
   68  00:8147  91 CC             sta     [tmp_addr], Y ; write the content of the run
   69  00:8149  A0 00             ldy     #0
   70                                             
   71  00:014B                    inc16   idx16
   72  00:815C  E8                inx
   73  00:815D  CE C2 00          dec     size
   74  00:8160  CE C1 00          dec     run
   75  00:8163  D0 D5             bne     .in_anti_run_loop
   76                     
   77                             ;; done?
   78  00:8165  AD C2 00          lda     size
   79  00:8168  F0 03             beq     .done
   80  00:816A  4C 69 80          jmp     .loop
   81                             
   82                             
   83  00:816D            .done:          
   84  00:816D  60                rts
#[1]   escape.asm
#[2]   joystick.asm
   65                             .include "joystick.asm" 
    1  00:816E            handle_joy:
    2                             ;; joystick
    3  00:816E  A9 01             lda     #1
    4  00:8170  8D 16 40          sta     $4016
    5  00:8173  A9 00             lda     #0
    6  00:8175  8D 16 40          sta     $4016
    7                     
    8  00:8178  AD 16 40          lda     $4016
    9  00:817B  AD 16 40          lda     $4016
   10  00:817E  AD 16 40          lda     $4016
   11                             
   12  00:8181  AD 16 40          lda     $4016
   13  00:8184  29 01             and     #%00000001      ; start
   14  00:8186  F0 12             beq     .j_up
   15  00:8188  EE BB 00          inc     level_num
   16  00:818B  AD BB 00          lda     level_num
   17  00:818E  C9 0C             cmp     #12
   18  00:8190  D0 05             bne     .continue
   19  00:8192  A9 00             lda     #0
   20  00:8194  8D BB 00          sta     level_num
   21                             
   22  00:8197            .continue
   23  00:8197  4C 21 C0          jmp     start2
   24                             
   25  00:819A            .j_up:  
   26  00:819A  AD 16 40          lda     $4016
   27  00:819D  29 01             and     #%00000001
   28  00:819F  F0 08             beq     .j_down         ; up
   29  00:01A1                    mov     #dir_up, gd
   30  00:81A6  20 D7 81          jsr     draw_guy
   31                     
   32  00:81A9            .j_down:
   33  00:81A9  AD 16 40          lda     $4016
   34  00:81AC  29 01             and     #%00000001
   35  00:81AE  F0 08             beq     .j_left         ; down
   36  00:01B0                    mov     #dir_down, gd
   37  00:81B5  20 D7 81          jsr     draw_guy
   38                     
   39  00:81B8            .j_left:
   40  00:81B8  AD 16 40          lda     $4016
   41  00:81BB  29 01             and     #%00000001
   42  00:81BD  F0 08             beq     .j_right
   43  00:01BF                    mov     #dir_left, gd
   44  00:81C4  20 D7 81          jsr     draw_guy
   45                     
   46                                                     ; left
   47  00:81C7            .j_right:
   48  00:81C7  AD 16 40          lda     $4016
   49  00:81CA  29 01             and     #%00000001
   50  00:81CC  F0 08             beq     .done
   51  00:01CE                    mov     #dir_right, gd
   52  00:81D3  20 D7 81          jsr     draw_guy
   53                                                     ; right
   54  00:81D6            .done:  
   55  00:81D6  60                rts
   56                     
#[1]   escape.asm
#[2]   guy.asm
   66                             .include "guy.asm"      
    1  00:81D7            draw_guy:
    2  00:01D7                    debug_p ds_draw_guy
    3  00:81F6  AD BC 00          lda     gx
    4  00:81F9  0A                asl     a
    5  00:81FA  0A                asl     a
    6  00:81FB  0A                asl     a
    7  00:81FC  0A                asl     a
    8  00:81FD  38                sec
    9  00:81FE  ED CE 00          sbc     x_scroll
   10  00:8201  AA                tax
   11                             
   12  00:8202  AD BD 00          lda     gy
   13  00:8205  0A                asl     a
   14  00:8206  0A                asl     a
   15  00:8207  0A                asl     a
   16  00:8208  0A                asl     a
   17  00:8209  18                clc
   18  00:820A  69 2F             adc     #$2F
   19  00:820C  A8                tay     
   20                     
   21  00:820D  AD BE 00          lda     gd
   22  00:8210  8D 01 00          sta     debug_num
   23  00:8213  C9 01             cmp     #dir_up
   24  00:8215  F0 15             beq     .up
   25                     
   26  00:8217            .compare2:      
   27  00:8217  C9 02             cmp     #dir_down
   28  00:8219  F0 0B             beq     .down_trampoline
   29  00:821B  C9 04             cmp     #dir_right
   30  00:821D  F0 0A             beq     .right_trampoline
   31  00:821F  C9 03             cmp     #dir_left
   32  00:8221  F0 00             beq     .left_trampoline
   33                     
   34  00:8223            .left_trampoline:
   35  00:8223  4C DA 82          jmp     .left   
   36  00:8226            .down_trampoline:
   37  00:8226  4C 83 82          jmp     .down
   38  00:8229            .right_trampoline:
   39  00:8229  4C 31 83          jmp     .right
   40                     
   41  00:822C            .up:
   42  00:822C  8C 00 02          sty     sprite
   43  00:822F  AD 02 C8          lda     guy_u_tile
   44  00:8232  8D 01 02          sta     sprite+1
   45  00:8235  A9 00             lda     #0
   46  00:8237  8D 02 02          sta     sprite+2
   47  00:823A  8E 03 02          stx     sprite+3
   48                     
   49  00:823D  8C 04 02          sty     sprite+4
   50  00:8240  AD 03 C8          lda     guy_u_tile+1
   51  00:8243  8D 05 02          sta     sprite+5
   52  00:8246  A9 00             lda     #0
   53  00:8248  8D 06 02          sta     sprite+6
   54  00:824B  8A                txa
   55  00:824C  18                clc
   56  00:824D  69 08             adc     #$8
   57  00:824F  8D 07 02          sta     sprite+7
   58                     
   59  00:8252  98                tya
   60  00:8253  18                clc
   61  00:8254  69 08             adc     #$8
   62  00:8256  8D 08 02          sta     sprite+8
   63  00:8259  AD 04 C8          lda     guy_u_tile+2
   64  00:825C  8D 09 02          sta     sprite+9
   65  00:825F  A9 00             lda     #0
   66  00:8261  8D 0A 02          sta     sprite+10
   67  00:8264  8E 0B 02          stx     sprite+11
   68                     
   69  00:8267  98                tya
   70  00:8268  18                clc
   71  00:8269  69 08             adc     #$8
   72  00:826B  8D 0C 02          sta     sprite+12
   73  00:826E  AD 05 C8          lda     guy_u_tile+3
   74  00:8271  8D 0D 02          sta     sprite+13
   75  00:8274  A9 00             lda     #0
   76  00:8276  8D 0E 02          sta     sprite+14
   77  00:8279  8A                txa
   78  00:827A  18                clc
   79  00:827B  69 08             adc     #$8
   80  00:827D  8D 0F 02          sta     sprite+15
   81                     
   82  00:8280  4C 88 83          jmp     .done
   83  00:8283            .down:  
   84  00:8283  8C 00 02          sty     sprite
   85  00:8286  AD 06 C8          lda     guy_d_tile
   86  00:8289  8D 01 02          sta     sprite+1
   87  00:828C  A9 00             lda     #0
   88  00:828E  8D 02 02          sta     sprite+2
   89  00:8291  8E 03 02          stx     sprite+3
   90                     
   91  00:8294  8C 04 02          sty     sprite+4
   92  00:8297  AD 07 C8          lda     guy_d_tile+1
   93  00:829A  8D 05 02          sta     sprite+5
   94  00:829D  A9 00             lda     #0
   95  00:829F  8D 06 02          sta     sprite+6
   96  00:82A2  8A                txa
   97  00:82A3  18                clc
   98  00:82A4  69 08             adc     #$8
   99  00:82A6  8D 07 02          sta     sprite+7
  100                     
  101  00:82A9  98                tya
  102  00:82AA  18                clc
  103  00:82AB  69 08             adc     #$8
  104  00:82AD  8D 08 02          sta     sprite+8
  105  00:82B0  AD 08 C8          lda     guy_d_tile+2
  106  00:82B3  8D 09 02          sta     sprite+9
  107  00:82B6  A9 00             lda     #0
  108  00:82B8  8D 0A 02          sta     sprite+10
  109  00:82BB  8E 0B 02          stx     sprite+11
  110                     
  111  00:82BE  98                tya
  112  00:82BF  18                clc
  113  00:82C0  69 08             adc     #$8
  114  00:82C2  8D 0C 02          sta     sprite+12
  115  00:82C5  AD 09 C8          lda     guy_d_tile+3
  116  00:82C8  8D 0D 02          sta     sprite+13
  117  00:82CB  A9 00             lda     #0
  118  00:82CD  8D 0E 02          sta     sprite+14
  119  00:82D0  8A                txa
  120  00:82D1  18                clc
  121  00:82D2  69 08             adc     #$8
  122  00:82D4  8D 0F 02          sta     sprite+15
  123                     
  124  00:82D7  4C 88 83          jmp     .done
  125                     
  126  00:82DA            .left:  
  127  00:82DA  8C 00 02          sty     sprite
  128  00:82DD  AD 0A C8          lda     guy_l_tile
  129  00:82E0  8D 01 02          sta     sprite+1
  130  00:82E3  A9 00             lda     #0
  131  00:82E5  8D 02 02          sta     sprite+2
  132  00:82E8  8E 03 02          stx     sprite+3
  133                     
  134  00:82EB  8C 04 02          sty     sprite+4
  135  00:82EE  AD 0B C8          lda     guy_l_tile+1
  136  00:82F1  8D 05 02          sta     sprite+5
  137  00:82F4  A9 00             lda     #0
  138  00:82F6  8D 06 02          sta     sprite+6
  139  00:82F9  8A                txa
  140  00:82FA  18                clc
  141  00:82FB  69 08             adc     #$8
  142  00:82FD  8D 07 02          sta     sprite+7
  143                     
  144  00:8300  98                tya
  145  00:8301  18                clc
  146  00:8302  69 08             adc     #$8
  147  00:8304  8D 08 02          sta     sprite+8
  148  00:8307  AD 0C C8          lda     guy_l_tile+2
  149  00:830A  8D 09 02          sta     sprite+9
  150  00:830D  A9 00             lda     #0
  151  00:830F  8D 0A 02          sta     sprite+10
  152  00:8312  8E 0B 02          stx     sprite+11
  153                     
  154  00:8315  98                tya
  155  00:8316  18                clc
  156  00:8317  69 08             adc     #$8
  157  00:8319  8D 0C 02          sta     sprite+12
  158  00:831C  AD 0D C8          lda     guy_l_tile+3
  159  00:831F  8D 0D 02          sta     sprite+13
  160  00:8322  A9 00             lda     #0
  161  00:8324  8D 0E 02          sta     sprite+14
  162  00:8327  8A                txa
  163  00:8328  18                clc
  164  00:8329  69 08             adc     #$8
  165  00:832B  8D 0F 02          sta     sprite+15
  166                     
  167  00:832E  4C 88 83          jmp     .done
  168                             
  169  00:8331            .right:
  170  00:8331  8C 00 02          sty     sprite
  171  00:8334  AD 0B C8          lda     guy_l_tile+1
  172  00:8337  8D 01 02          sta     sprite+1
  173  00:833A  A9 40             lda     #%01000000
  174  00:833C  8D 02 02          sta     sprite+2
  175  00:833F  8E 03 02          stx     sprite+3
  176                     
  177  00:8342  8C 04 02          sty     sprite+4
  178  00:8345  AD 0A C8          lda     guy_l_tile
  179  00:8348  8D 05 02          sta     sprite+5
  180  00:834B  A9 40             lda     #%01000000
  181  00:834D  8D 06 02          sta     sprite+6
  182  00:8350  8A                txa
  183  00:8351  18                clc
  184  00:8352  69 08             adc     #$8
  185  00:8354  8D 07 02          sta     sprite+7
  186                     
  187  00:8357  98                tya
  188  00:8358  18                clc
  189  00:8359  69 08             adc     #$8
  190  00:835B  8D 08 02          sta     sprite+8
  191  00:835E  AD 0D C8          lda     guy_l_tile+3
  192  00:8361  8D 09 02          sta     sprite+9
  193  00:8364  A9 40             lda     #%01000000
  194  00:8366  8D 0A 02          sta     sprite+10
  195  00:8369  8E 0B 02          stx     sprite+11
  196                     
  197  00:836C  98                tya
  198  00:836D  18                clc
  199  00:836E  69 08             adc     #$8
  200  00:8370  8D 0C 02          sta     sprite+12
  201  00:8373  AD 0C C8          lda     guy_l_tile+2
  202  00:8376  8D 0D 02          sta     sprite+13
  203  00:8379  A9 40             lda     #%01000000
  204  00:837B  8D 0E 02          sta     sprite+14
  205  00:837E  8A                txa
  206  00:837F  18                clc
  207  00:8380  69 08             adc     #$8
  208  00:8382  8D 0F 02          sta     sprite+15
  209                     
  210  00:8385  4C 88 83          jmp     .done
  211                     
  212  00:8388            .done:  
  213  00:8388  60                rts
  214                     
#[1]   escape.asm
#[2]   load-draw-level.asm
   67                             .include "load-draw-level.asm"
    1  00:8389            load_level:
    2  00:0389                    mov     #0, tmp_size+1
    3  00:038E                    mov     #dir_right, gd
    4  00:0393                    mov     #0, x_scroll
    5                                             
    6  00:0398                    mov16   level_addr, idx16
    7  00:83A4  A0 00             ldy     #0
    8  00:03A6                    mov     [idx16], Y, tmp
    9  00:83AB  C8                iny
   10  00:03AC                    mov     [idx16], Y, tmp
   11  00:83B1  C8                iny
   12  00:03B2                    mov     [idx16], Y, tmp
   13  00:83B7  C8                iny
   14  00:03B8                    mov     [idx16], Y, tmp
   15  00:83BD  A0 0F             ldy     #15             ; ESXL + width + height + MSB of size of title
   16  00:03BF                    mov     [idx16], Y, tmp_size    ; size of title string
   17  00:03C4                    add16   idx16, #16              ; move to start of title
   18                     
   19                             ;; copy the title string
   20  00:03D5                    strcpyp2c       idx16, title, tmp_size
   21                     
   22  00:03EA                    add16   idx16, tmp_size ; move past the title string
   23  00:83FD  A0 03             ldy     #3              ; MSB of size of author
   24  00:03FF                    mov     [idx16], Y, tmp_size ; size of author string
   25  00:0404                    add16   idx16, #4       ; move to start of author
   26                     
   27                             ;; copy the author string
   28  00:0415                    strcpyp2c       idx16, author, tmp_size
   29                     
   30  00:042A                    add16   idx16, tmp_size ; move past the author string
   31                     
   32  00:843D  A0 03             ldy     #3              ; MSB of guy x
   33  00:043F                    mov     [idx16], Y, gx
   34  00:0444                    add16   idx16, #4
   35  00:8455  A0 03             ldy     #3              ; MSB of guy y
   36  00:0457                    mov     [idx16], Y, gy
   37  00:045C                    add16   idx16, #4
   38                     
   39                                     
   40                             ;; start rledecoding
   41  00:046D                    mov16   #tiles, tmp_addr
   42  00:8477  20 00 80          jsr     rledecode
   43                     
   44                     
   45  00:047A                    debug_p ds_tiles
   46  00:0499                    mov     #tiles, debug_num
   47  00:049E                    mov     (#tiles)+1, debug_num
   48  00:84A4  A2 00             ldx     #0
   49  00:84A6            .tile_print:    
   50  00:04A6                    mov     tiles, X, debug_num
   51  00:84AC  E8                inx
   52  00:84AD  8A                txa
   53  00:84AE  C9 B4             cmp     #180
   54  00:84B0  D0 F4             bne     .tile_print
   55                             
   56  00:04B2                    mov16   #otiles, tmp_addr
   57  00:84BC  20 00 80          jsr     rledecode
   58  00:04BF                    mov16   #dests, tmp_addr
   59  00:84C9  20 00 80          jsr     rledecode
   60  00:04CC                    mov16   #flags, tmp_addr
   61  00:84D6  20 00 80          jsr     rledecode
   62                     
   63  00:84D9  60                rts
   64                                     
   65                             
   66  00:84DA            draw_level:
   67                             ;; assumes load_level just called
   68  00:04DA                    mov     #0, tile_pos
   69  00:84DF  AD 04 00  .loop:  lda     tile_pos
   70  00:84E2  C9 B4             cmp     #180
   71  00:84E4  F0 23             beq     .done
   72  00:84E6  89 04             bit     #%00000100
   73  00:84E8  D0 03             bne     .continue
   74  00:84EA  20 08 C2          jsr     vwait
   75  00:84ED            .continue:      
   76  00:84ED  AE 04 00          ldx     tile_pos
   77                     
   78                             ;; get the tile
   79  00:84F0  BD 07 00          lda     tiles, X
   80  00:84F3  AA                tax
   81  00:84F4  BD 10 C8          lda     tile_name_table, X
   82  00:84F7  8D 05 00          sta     tile
   83  00:84FA  BD 43 C8          lda     tile_attr_table, X
   84  00:84FD  8D 06 00          sta     tile+1  
   85                     
   86  00:8500  20 0A 85          jsr     draw_tile
   87  00:8503  EE 04 00          inc     tile_pos
   88  00:8506  4C DF 84          jmp     .loop
   89                                     
   90  00:8509  60        .done:  rts
   91                     
   92                     
   93  00:850A            draw_tile:
   94           00C6      screen_pos .equ tmp16
   95  00:850A  AE 04 00          ldx     tile_pos
   96  00:050D                    mov     tile_pos_table_2, X, screen_pos+1
   97  00:0513                    mov     tile_pos_table_1, X, screen_pos
   98                     
   99  00:0519                    add16   screen_pos, #$20C0
  100                     
  101  00:852A  AD C6 00          lda     screen_pos
  102  00:852D  0A                asl     a
  103  00:852E  AD C7 00          lda     screen_pos+1
  104  00:8531  2A                rol     a
  105  00:8532  29 07             and     #%00000111
  106  00:8534  0A                asl     a
  107  00:8535  0A                asl     a
  108  00:8536  0A                asl     a
  109  00:8537  8D C9 00          sta     tmp16_2+1
  110  00:853A  AD C6 00          lda     screen_pos
  111  00:853D  29 1C             and     #%00011100
  112  00:853F  4A                lsr     a
  113  00:8540  4A                lsr     a
  114  00:8541  0D C9 00          ora     tmp16_2+1
  115  00:8544  69 C0             adc     #$C0    
  116                     
  117  00:8546  8D C1 00          sta     tmp
  118  00:8549  AD C7 00          lda     screen_pos+1
  119  00:854C  29 FC             and     #%11111100
  120  00:854E  18                clc
  121  00:854F  69 03             adc     #$3     
  122  00:8551  8D 06 20          sta     $2006           ; set address of thing
  123  00:8554  A8                tay
  124  00:8555  AD C1 00          lda     tmp
  125  00:8558  8D 06 20          sta     $2006   
  126  00:855B  AE 07 20          ldx     $2007           ; invalid data
  127  00:855E  AE 07 20          ldx     $2007           ; correct data
  128  00:8561  8C 06 20          sty     $2006           ; reset address
  129  00:8564  8D 06 20          sta     $2006
  130                     
  131  00:8567  AD C6 00          lda     screen_pos      ; find the bit
  132  00:856A  29 42             and     #%01000010
  133  00:856C  D0 12             bne     .test1
  134  00:856E  AD 06 00          lda     tile+1
  135  00:8571  29 03             and     #%00000011
  136  00:8573  8D C1 00          sta     tmp
  137  00:8576  8A                txa
  138  00:8577  0D C1 00          ora     tmp
  139  00:857A  8D 07 20          sta     $2007           ; set the color
  140  00:857D  4C BB 85          jmp     .update_tile
  141                     
  142  00:8580  C9 02     .test1: cmp     #%00000010
  143  00:8582  D0 12             bne     .test2
  144  00:8584  AD 06 00          lda     tile+1
  145  00:8587  29 0C             and     #%00001100
  146  00:8589  8D C1 00          sta     tmp
  147  00:858C  8A                txa
  148  00:858D  0D C1 00          ora     tmp
  149  00:8590  8D 07 20          sta     $2007
  150  00:8593  4C BB 85          jmp     .update_tile
  151                     
  152  00:8596  C9 40     .test2: cmp     #%01000000
  153  00:8598  D0 12             bne     .test3
  154  00:859A  AD 06 00          lda     tile+1
  155  00:859D  29 30             and     #%00110000
  156  00:859F  8D C1 00          sta     tmp
  157  00:85A2  8A                txa
  158  00:85A3  0D C1 00          ora     tmp
  159  00:85A6  8D 07 20          sta     $2007
  160  00:85A9  4C BB 85          jmp     .update_tile
  161                     
  162  00:85AC  AD 06 00  .test3: lda     tile+1
  163  00:85AF  29 C0             and     #%11000000
  164  00:85B1  8D C1 00          sta     tmp
  165  00:85B4  8A                txa
  166  00:85B5  0D C1 00          ora     tmp
  167  00:85B8  8D 07 20          sta     $2007
  168                             
  169                     
  170  00:85BB            .update_tile:                                           
  171  00:85BB  AD C7 00          lda     tmp16+1
  172  00:85BE  8D 06 20          sta     $2006
  173  00:85C1  AD C6 00          lda     tmp16
  174  00:85C4  8D 06 20          sta     $2006
  175  00:85C7  AD 05 00          lda     tile
  176  00:85CA  8D 07 20          sta     $2007           ; update the tile
  177                     
  178  00:05CD                    add16   tmp16, #1       ; next part (right)
  179  00:85DE  AD C7 00          lda     tmp16+1
  180  00:85E1  8D 06 20          sta     $2006
  181  00:85E4  AD C6 00          lda     tmp16
  182  00:85E7  8D 06 20          sta     $2006
  183  00:85EA  EE 05 00          inc     tile
  184  00:85ED  AD 05 00          lda     tile
  185  00:85F0  8D 07 20          sta     $2007           ; update the tile
  186                     
  187  00:05F3                    add16   tmp16, #$20     ; next part (down)
  188  00:8604  AD C7 00          lda     tmp16+1
  189  00:8607  8D 06 20          sta     $2006
  190  00:860A  AD C6 00          lda     tmp16
  191  00:860D  8D 06 20          sta     $2006
  192  00:8610  AD 05 00          lda     tile
  193  00:8613  18                clc
  194  00:8614  69 10             adc     #$10
  195  00:8616  8D 05 00          sta     tile
  196  00:8619  8D 07 20          sta     $2007           ; update the tile
  197                     
  198  00:061C                    add16   tmp16, #$FFFF   ; last part (left)
  199  00:862D  AD C7 00          lda     tmp16+1
  200  00:8630  8D 06 20          sta     $2006
  201  00:8633  AD C6 00          lda     tmp16
  202  00:8636  8D 06 20          sta     $2006
  203  00:8639  CE 05 00          dec     tile
  204  00:863C  AD 05 00          lda     tile
  205  00:863F  8D 07 20          sta     $2007           ; update the tile
  206                     
  207  00:8642  60                rts
  208                     
#[1]   escape.asm
   68                             
   69                     
   70           0001              .bank   1
   71           A000              .org    $A000
   72                     
   73                                     
   74           0002              .bank   2
   75           C000              .org    $C000
   76                                     
#[2]   interrupts.asm
   77                             .include "interrupts.asm"
    1  02:C000  78        intr:   sei
    2  02:C001  40                rti
    3                     
    4  02:C002            nmi:    
    5                     ;;;     debug_p ds_nmi
    6  02:C002  A9 00             lda     #0
    7  02:C004  8D 06 20          sta     $2006
    8  02:C007  8D 06 20          sta     $2006
    9  02:C00A  AD CE 00          lda     x_scroll
   10  02:C00D  8D 05 20          sta     $2005
   11  02:C010  A9 00             lda     #0
   12  02:C012  8D 05 20          sta     $2005
   13                     
   14  02:C015  A9 02             lda     #sprite/$100    ; sprite
   15  02:C017  8D 14 40          sta     $4014
   16  02:C01A  40                rti
#[1]   escape.asm
   78                     
   79                                     
   80  02:C01B  78        start:  sei
   81  02:801C                    mov     #0, level_num
   82                     
   83  02:C021            start2:         
   84  02:C021  A9 00             lda     #0
   85  02:C023  8D 00 20          sta     $2000
   86  02:C026  8D 01 20          sta     $2001
   87                     
   88  02:C029  20 0E C2          jsr     init_sprite_memory
   89                             
   90  02:802C                    debug_p ds_begin
   91                             
   92  02:C04B  20 08 C2          jsr     vwait   
   93  02:C04E  20 08 C2          jsr     vwait
   94  02:C051  20 08 C2          jsr     vwait   
   95  02:C054  20 08 C2          jsr     vwait
   96                     
   97                             
   98                     
   99                     ;;; draw item
  100  02:C057  20 08 C2          jsr     vwait
  101                     
  102  02:C05A  A9 3F             lda     #$3f
  103  02:C05C  8D 06 20          sta     $2006
  104  02:C05F  A9 00             lda     #$00
  105  02:C061  8D 06 20          sta     $2006
  106  02:C064  8D 05 20          sta     $2005
  107  02:C067  8D 05 20          sta     $2005
  108                     
#[2]   palettes.asm
  109                             .include "palettes.asm" 
    1                     ;;; palette 0
    2  02:C06A  A9 0E             lda     #$0e            ; black
    3  02:C06C  8D 07 20          sta     $2007
    4  02:C06F  A9 2D             lda     #$2d            ; 50gray
    5  02:C071  8D 07 20          sta     $2007
    6  02:C074  A9 3D             lda     #$3d            ; 25gray
    7  02:C076  8D 07 20          sta     $2007
    8  02:C079  A9 38             lda     #$38            ; orange
    9  02:C07B  8D 07 20          sta     $2007
   10                     
   11                     ;;; palette 1
   12  02:C07E  A9 0E             lda     #$0e
   13  02:C080  8D 07 20          sta     $2007
   14  02:C083  A9 16             lda     #$16            ; red
   15  02:C085  8D 07 20          sta     $2007
   16  02:C088  A9 3D             lda     #$3d            ; gray
   17  02:C08A  8D 07 20          sta     $2007
   18  02:C08D  A9 28             lda     #$28            ; yellow
   19  02:C08F  8D 07 20          sta     $2007
   20                             
   21                             
   22                     ;;; palette 2
   23  02:C092  A9 0E             lda     #$0e            ; black
   24  02:C094  8D 07 20          sta     $2007
   25  02:C097  A9 12             lda     #$12            ; blue
   26  02:C099  8D 07 20          sta     $2007
   27  02:C09C  A9 3D             lda     #$3D            ; gray
   28  02:C09E  8D 07 20          sta     $2007
   29  02:C0A1  A9 17             lda     #$17            ; brownish
   30  02:C0A3  8D 07 20          sta     $2007
   31                             
   32                             
   33                     ;;; palette 3
   34  02:C0A6  A9 0E             lda     #$0e            ; black
   35  02:C0A8  8D 07 20          sta     $2007
   36  02:C0AB  A9 19             lda     #$19            ; green
   37  02:C0AD  8D 07 20          sta     $2007
   38  02:C0B0  A9 3D             lda     #$3d            ; gray
   39  02:C0B2  8D 07 20          sta     $2007
   40  02:C0B5  A9 12             lda     #$12            ; blue
   41  02:C0B7  8D 07 20          sta     $2007
   42                     
   43                             
   44                     ;;; sprite palette 1
   45  02:C0BA  A9 3F             lda     #$3f
   46  02:C0BC  8D 06 20          sta     $2006
   47  02:C0BF  A9 11             lda     #$11
   48  02:C0C1  8D 06 20          sta     $2006
   49  02:C0C4  A9 18             lda     #$18            ; brown
   50  02:C0C6  8D 07 20          sta     $2007
   51  02:C0C9  A9 36             lda     #$36            ; pink
   52  02:C0CB  8D 07 20          sta     $2007
   53  02:C0CE  A9 2C             lda     #$2C            ; blue
   54  02:C0D0  8D 07 20          sta     $2007
#[1]   escape.asm
  110                                     
  111  02:C0D3  20 08 C2          jsr     vwait
  112  02:C0D6  20 08 C2          jsr     vwait
  113                     
  114                     
  115  02:C0D9  20 17 C1          jsr     choose_level
  116                             
  117  02:C0DC  20 08 C2          jsr     vwait
  118                             
  119  02:C0DF            ppu_on: 
  120  02:80DF                    debug_p ds_ppu
  121  02:C0FE  20 08 C2          jsr     vwait
  122  02:C101  A9 80             lda     #%10000000
  123  02:C103  8D 00 20          sta     $2000   
  124  02:C106  20 08 C2          jsr     vwait
  125  02:C109  A9 1E             lda     #%00011110
  126  02:C10B  8D 01 20          sta     $2001
  127                             
  128                             
  129  02:C10E            main_loop:
  130  02:C10E  20 6E 81          jsr     handle_joy
  131  02:C111  20 08 C2          jsr     vwait
  132  02:C114  4C 0E C1          jmp     main_loop
  133                     
  134                             
  135  02:C117            choose_level:
  136  02:C117  AD BB 00          lda     level_num
  137  02:C11A  D0 0D             bne     .l1
  138  02:811C                    mov16   #sample_level01, level_addr
  139  02:C126  4C FB C1          jmp     .go
  140  02:C129  AD BB 00  .l1:    lda     level_num
  141  02:C12C  C9 01             cmp     #1
  142  02:C12E  D0 0D             bne     .l2
  143  02:8130                    mov16   #sample_level02, level_addr
  144  02:C13A  4C FB C1          jmp     .go
  145  02:C13D  AD BB 00  .l2:    lda     level_num
  146  02:C140  C9 02             cmp     #2
  147  02:C142  D0 0D             bne     .l3
  148  02:8144                    mov16   #sample_level02, level_addr
  149  02:C14E  4C FB C1          jmp     .go
  150  02:C151  AD BB 00  .l3:    lda     level_num
  151  02:C154  C9 03             cmp     #3
  152  02:C156  D0 0D             bne     .l4
  153  02:8158                    mov16   #sample_level03, level_addr
  154  02:C162  4C FB C1          jmp     .go
  155  02:C165  AD BB 00  .l4:    lda     level_num
  156  02:C168  C9 04             cmp     #4
  157  02:C16A  D0 0D             bne     .l5
  158  02:816C                    mov16   #sample_level04, level_addr
  159  02:C176  4C FB C1          jmp     .go
  160  02:C179  AD BB 00  .l5:    lda     level_num
  161  02:C17C  C9 05             cmp     #5
  162  02:C17E  D0 0D             bne     .l6
  163  02:8180                    mov16   #sample_level05, level_addr
  164  02:C18A  4C FB C1          jmp     .go
  165  02:C18D  AD BB 00  .l6:    lda     level_num
  166  02:C190  C9 06             cmp     #6
  167  02:C192  D0 0D             bne     .l7
  168  02:8194                    mov16   #sample_level06, level_addr
  169  02:C19E  4C FB C1          jmp     .go
  170  02:C1A1  AD BB 00  .l7:    lda     level_num
  171  02:C1A4  C9 07             cmp     #7
  172  02:C1A6  D0 0D             bne     .l8
  173  02:81A8                    mov16   #sample_level07, level_addr
  174  02:C1B2  4C FB C1          jmp     .go
  175  02:C1B5  AD BB 00  .l8:    lda     level_num
  176  02:C1B8  C9 08             cmp     #8
  177  02:C1BA  D0 0D             bne     .l9
  178  02:81BC                    mov16   #sample_level08, level_addr
  179  02:C1C6  4C FB C1          jmp     .go
  180  02:C1C9  AD BB 00  .l9:    lda     level_num
  181  02:C1CC  C9 09             cmp     #9
  182  02:C1CE  D0 0D             bne     .l10
  183  02:81D0                    mov16   #sample_level09, level_addr
  184  02:C1DA  4C FB C1          jmp     .go
  185  02:C1DD  AD BB 00  .l10:   lda     level_num
  186  02:C1E0  C9 0A             cmp     #10
  187  02:C1E2  D0 0D             bne     .l11
  188  02:81E4                    mov16   #sample_level10, level_addr
  189  02:C1EE  4C FB C1          jmp     .go
  190  02:81F1            .l11:   mov16   #sample_level11, level_addr
  191                                     
  192  02:C1FB            .go:    
  193  02:C1FB  20 89 83          jsr     load_level
  194  02:C1FE  20 D7 81          jsr     draw_guy
  195                     
  196  02:C201  20 08 C2          jsr     vwait
  197  02:C204  20 DA 84          jsr     draw_level
  198                     
  199  02:C207  60                rts
  200                             
  201                     
  202                             
  203  02:C208            vwait:  
  204  02:C208  AD 02 20          lda     $2002
  205  02:C20B  10 FB             bpl     vwait
  206                     
  207  02:C20D  60                rts
  208                     
  209                     
  210                     
  211  02:C20E            init_sprite_memory:
  212  02:C20E  A2 FF             ldx     #$FF
  213  02:C210  F0 06     .loop:  beq     .end    
  214  02:8212                    mov     #$FF, sprite, X
  215  02:C217  CA                dex
  216  02:C218  60        .end:   rts
  217                     
  218                     
  219                             
  220                                     
  221                     ;;; some data
  222                     ;;; data
  223           E000              .data
  224           0002              .bank   2
  225           C800              .org    $C800
#[2]   tiles.inc
  226                             .include "tiles.inc"
    1                     ;;; tiles, as defined in level.h
    2                             
    3           0000              .rsset $0
    4           0000      T_FLOOR .rs 1
    5           0001      T_RED   .rs 1
    6           0002      T_BLUE  .rs 1
    7           0003      T_GREY  .rs 1
    8           0004      T_GREEN .rs 1
    9           0005      T_EXIT  .rs 1
   10           0006      T_HOLE  .rs 1
   11           0007      T_GOLD  .rs 1
   12           0008      T_LASER .rs 1
   13           0009      T_PANEL .rs 1
   14           000A      T_STOP  .rs 1
   15           000B      T_RIGHT .rs 1
   16           000C      T_LEFT  .rs 1
   17           000D      T_UP    .rs 1
   18           000E      T_DOWN  .rs 1
   19           000F      T_ROUGH .rs 1
   20                     
   21           0010      T_ELECTRIC      .rs 1
   22           0011      T_ON    .rs 1
   23           0012      T_OFF   .rs 1
   24           0013      T_TRANSPORT     .rs 1
   25           0014      T_BROKEN        .rs 1
   26           0015      T_LR    .rs 1
   27           0016      T_UD    .rs 1
   28           0017      T_0     .rs 1
   29           0018      T_1     .rs 1
   30           0019      T_NS    .rs 1
   31           001A      T_NE    .rs 1
   32           001B      T_NW    .rs 1
   33           001C      T_SE    .rs 1
   34           001D      T_SW    .rs 1
   35           001E      T_WE    .rs 1
   36           001F      T_BUTTON        .rs 1
   37                     
   38           0020      T_BLIGHT        .rs 1
   39           0021      T_RLIGHT        .rs 1
   40           0022      T_GLIGHT        .rs 1
   41           0023      T_BLACK .rs 1
   42           0024      T_BUP   .rs 1
   43           0025      T_BDOWN .rs 1
   44           0026      T_RUP   .rs 1
   45           0027      T_RDOWN .rs 1
   46           0028      T_GUP   .rs 1
   47           0029      T_GDOWN .rs 1
   48           002A      T_BSPHERE       .rs 1
   49           002B      T_RSPHERE       .rs 1
   50           002C      T_GSPHERE       .rs 1
   51           002D      T_SPHERE        .rs 1
   52           002E      T_UNUSED_1      .rs 1
   53           002F      T_UNUSED_2      .rs 1
   54                     
   55           0030      T_BPANEL        .rs 1
   56           0031      T_RPANEL        .rs 1
   57           0032      T_GPANEL        .rs 1
   58                     
   59  02:C800            letter_start:
   60  02:C800  A0                .db $A0
   61  02:C801            laser_sprite_byte:
   62  02:C801  04                .db 4
   63                     
   64           0001      dir_up          .equ 1
   65           0002      dir_down        .equ 2
   66           0003      dir_left        .equ 3
   67           0004      dir_right       .equ 4
   68                     
   69  02:C802            guy_u_tile:
   70  02:C802  E0 E1 F0          .db $E0,$E1,$F0,$F1
       02:C805  F1        
   71  02:C806            guy_d_tile:
   72  02:C806  E2 E3 F2          .db $E2,$E3,$F2,$F3
       02:C809  F3        
   73  02:C80A            guy_l_tile:
   74  02:C80A  E4 E5 F4          .db $E4,$E5,$F4,$F5
       02:C80D  F5        
   75  02:C80E            laser_tile:
   76  02:C80E  E6 F6             .db $E6, $F6
   77                     
   78                             
   79  02:C810            tile_name_table:
   80  02:C810  6C 02 02          .db $6C,$02,$02,$02,$02,$04,$06,$6E,$08,$44,$0A,$20,$24,$26,$22,$0C, ...
       02:C813  02 02 04  
       02:C816  06 6E 08  
       02:C819  44 0A 20  
       02:C81C  24 26 22  
       02:C81F  0C 80 28  
       02:C822  2A 0E 46  
       02:C825  2C 2E 40  
       02:C828  42 48 4A  
       02:C82B  4C 4E 60  
       02:C82E  62 64 66  
       02:C831  66 66 00  
       02:C834  68 6C 68  
       02:C837  6C 68 6C  
       02:C83A  6A 6A 6A  
       02:C83D  6A 00 00  
       02:C840  82 82 82  
   84                     
   85  02:C843            tile_attr_table:
   86  02:C843  00 55 AA          .db $00,$55,$AA,$00,$FF,$AA,$00,$00,$55,$00,$55,$00,$00,$00,$00,$00, ...
       02:C846  00 FF AA  
       02:C849  00 00 55  
       02:C84C  00 55 00  
       02:C84F  00 00 00  
       02:C852  00 55 55  
       02:C855  00 00 00  
       02:C858  00 00 00  
       02:C85B  00 00 00  
       02:C85E  00 00 00  
       02:C861  00 00 AA  
       02:C864  55 FF 00  
       02:C867  AA AA 55  
       02:C86A  55 FF FF  
       02:C86D  AA 55 FF  
       02:C870  00 00 00  
       02:C873  AA 55 FF  
   90                     
   91  02:C876            tile_pos_table_1:
   92  02:C876  00 02 04          .db $00,$02,$04,$06,$08,$0A,$0C,$0E,$10,$12,$14,$16,$18,$1A,$1C,$1E, ...
       02:C879  06 08 0A  
       02:C87C  0C 0E 10  
       02:C87F  12 14 16  
       02:C882  18 1A 1C  
       02:C885  1E 00 02  
       02:C888  40 42 44  
       02:C88B  46 48 4A  
       02:C88E  4C 4E 50  
       02:C891  52 54 56  
       02:C894  58 5A 5C  
       02:C897  5E 40 42  
       02:C89A  80 82 84  
       02:C89D  86 88 8A  
       02:C8A0  8C 8E 90  
       02:C8A3  92 94 96  
       02:C8A6  98 9A 9C  
       02:C8A9  9E 80 82  
       02:C8AC  C0 C2 C4  
       02:C8AF  C6 C8 CA  
       02:C8B2  CC CE D0  
       02:C8B5  D2 D4 D6  
       02:C8B8  D8 DA DC  
       02:C8BB  DE C0 C2  
       02:C8BE  00 02 04  
       02:C8C1  06 08 0A  
       02:C8C4  0C 0E 10  
       02:C8C7  12 14 16  
       02:C8CA  18 1A 1C  
       02:C8CD  1E 00 02  
       02:C8D0  40 42 44  
       02:C8D3  46 48 4A  
       02:C8D6  4C 4E 50  
       02:C8D9  52 54 56  
       02:C8DC  58 5A 5C  
       02:C8DF  5E 40 42  
       02:C8E2  80 82 84  
       02:C8E5  86 88 8A  
       02:C8E8  8C 8E 90  
       02:C8EB  92 94 96  
       02:C8EE  98 9A 9C  
       02:C8F1  9E 80 82  
       02:C8F4  C0 C2 C4  
       02:C8F7  C6 C8 CA  
       02:C8FA  CC CE D0  
       02:C8FD  D2 D4 D6  
       02:C900  D8 DA DC  
       02:C903  DE C0 C2  
       02:C906  00 02 04  
       02:C909  06 08 0A  
       02:C90C  0C 0E 10  
       02:C90F  12 14 16  
       02:C912  18 1A 1C  
       02:C915  1E 00 02  
       02:C918  40 42 44  
       02:C91B  46 48 4A  
       02:C91E  4C 4E 50  
       02:C921  52 54 56  
       02:C924  58 5A 5C  
       02:C927  5E 40 42  
  112  02:C92A            tile_pos_table_2:
  113  02:C92A  00 00 00          .db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00, ...
       02:C92D  00 00 00  
       02:C930  00 00 00  
       02:C933  00 00 00  
       02:C936  00 00 00  
       02:C939  00 04 04  
       02:C93C  00 00 00  
       02:C93F  00 00 00  
       02:C942  00 00 00  
       02:C945  00 00 00  
       02:C948  00 00 00  
       02:C94B  00 04 04  
       02:C94E  00 00 00  
       02:C951  00 00 00  
       02:C954  00 00 00  
       02:C957  00 00 00  
       02:C95A  00 00 00  
       02:C95D  00 04 04  
       02:C960  00 00 00  
       02:C963  00 00 00  
       02:C966  00 00 00  
       02:C969  00 00 00  
       02:C96C  00 00 00  
       02:C96F  00 04 04  
       02:C972  01 01 01  
       02:C975  01 01 01  
       02:C978  01 01 01  
       02:C97B  01 01 01  
       02:C97E  01 01 01  
       02:C981  01 05 05  
       02:C984  01 01 01  
       02:C987  01 01 01  
       02:C98A  01 01 01  
       02:C98D  01 01 01  
       02:C990  01 01 01  
       02:C993  01 05 05  
       02:C996  01 01 01  
       02:C999  01 01 01  
       02:C99C  01 01 01  
       02:C99F  01 01 01  
       02:C9A2  01 01 01  
       02:C9A5  01 05 05  
       02:C9A8  01 01 01  
       02:C9AB  01 01 01  
       02:C9AE  01 01 01  
       02:C9B1  01 01 01  
       02:C9B4  01 01 01  
       02:C9B7  01 05 05  
       02:C9BA  02 02 02  
       02:C9BD  02 02 02  
       02:C9C0  02 02 02  
       02:C9C3  02 02 02  
       02:C9C6  02 02 02  
       02:C9C9  02 06 06  
       02:C9CC  02 02 02  
       02:C9CF  02 02 02  
       02:C9D2  02 02 02  
       02:C9D5  02 02 02  
       02:C9D8  02 02 02  
       02:C9DB  02 06 06  
  133                             
#[1]   escape.asm
  227                     
  228                     
  229  02:C9DE            levels: 
  230  02:C9DE  F6 C9             .dw sample_level01, ...
       02:C9E0  9F CA     
       02:C9E2  40 CB     
       02:C9E4  C9 CB     
       02:C9E6  83 CC     
       02:C9E8  34 CD     
       02:C9EA  B7 CD     
       02:C9EC  4F CE     
       02:C9EE  0F CF     
       02:C9F0  A9 CF     
       02:C9F2  6D D0     
       02:C9F4  31 D1     
  242                     
  243  02:C9F6            sample_level01: 
  244  02:C9F6                    .incbin "levels/tutor01.esx"            
  245  02:CA9F            sample_level02: 
  246  02:CA9F                    .incbin "levels/tutor02.esx"            
  247  02:CB40            sample_level03: 
  248  02:CB40                    .incbin "levels/tutor03.esx"            
  249  02:CBC9            sample_level04: 
  250  02:CBC9                    .incbin "levels/tutor04.esx"            
  251  02:CC83            sample_level05: 
  252  02:CC83                    .incbin "levels/tutor05.esx"            
  253  02:CD34            sample_level06: 
  254  02:CD34                    .incbin "levels/tutor06.esx"            
  255  02:CDB7            sample_level07: 
  256  02:CDB7                    .incbin "levels/tutor07.esx"            
  257  02:CE4F            sample_level08: 
  258  02:CE4F                    .incbin "levels/tutor08.esx"            
  259  02:CF0F            sample_level09: 
  260  02:CF0F                    .incbin "levels/tutor09.esx"            
  261  02:CFA9            sample_level10: 
  262  02:CFA9                    .incbin "levels/tutor10.esx"            
  263  02:D06D            sample_level11: 
  264  02:D06D                    .incbin "levels/tutor11.esx"            
  265  02:D131            sample_level12: 
  266  02:D131                    .incbin "levels/tutor12.esx"            
  267                     
  268                     
  269  02:D209  62 65 67  ds_begin .db    "begin",0
       02:D20C  69 6E 00  
  270  02:D20F  72 6C 65  ds1:    .db     "rledecode",0
       02:D212  64 65 63  
       02:D215  6F 64 65  
       02:D218  00        
  271  02:D219  70 70 75  ds_ppu: .db     "ppu_on",0
       02:D21C  5F 6F 6E  
       02:D21F  00        
  272  02:D220  72 75 6E  ds_run: .db     "run",0
       02:D223  00        
  273  02:D224  61 72 75  ds_antirun:     .db     "arun",0
       02:D227  6E 00     
  274  02:D229  6E 6D 69  ds_nmi: .db     "nmi",0
       02:D22C  00        
  275  02:D22D  78 00     ds_x:   .db     "x",0
  276  02:D22F  79 00     ds_y:   .db     "y",0
  277  02:D231  69 00     ds_i:   .db     "i",0
  278  02:D233  74 6D 70  ds_tmpaddr:     .db     "tmp_addr",0
       02:D236  5F 61 64  
       02:D239  64 72 00  
  279  02:D23C  74 69 6C  ds_tiles:       .db     "tiles",0
       02:D23F  65 73 00  
  280  02:D242  64 72 61  ds_draw_guy     .db     "draw_guy",0
       02:D245  77 5F 67  
       02:D248  75 79 00  
  281                     
  282                                             
  283                     ;;; vectors
  284           0003              .bank   3
  285           FFFA              .org    $FFFA
  286  03:FFFA  02 C0             .dw     nmi,start,intr
       03:FFFC  1B C0     
       03:FFFE  00 C0     
  287                     
  288                     
  289           0004              .bank   4
  290                     
  291  04:0000                    .incbin "escape.chr"
  292  04:1000                    .incbin "debug.chr"
