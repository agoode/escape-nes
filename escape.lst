#[1]   escape.asm
    2                     
#[2]   arg.mac
    3                             .include "arg.mac"
    1           0000      ARG_NONE        .equ 0
    2           0001      ARG_REG         .equ 1
    3           0002      ARG_IMMED       .equ 2
    4           0003      ARG_ABS         .equ 3
    5           0003      ARG_ABSOLUTE    .equ 3
    6           0004      ARG_INDIRECT    .equ 4
    7           0005      ARG_STRING      .equ 5
    8           0006      ARG_LABEL       .equ 6
#[1]   escape.asm
#[2]   common.mac
    4                             .include "common.mac"
    1                     ; mov src, dst
    2                     ; dst := [src]
    3                     mova    .macro
    4                             sta \1
    5                             .endm
    6                     movx    .macro
    7                             stx \1
    8                             .endm
    9                     movy    .macro
   10                             sty \1
   11                             .endm
   12                     mov     .macro
   13                             .if \?1 = ARG_REG
   14                             st\1 \2
   15                             .else
   16                             lda \1
   17                             sta \2
   18                             .endif
   19                             .endm
   20                     
   21                     ; mov16 src16, dst16
   22                     ; dst16 := [src16]
   23                     
   24                     ; mov16 #src16, dst16
   25                     ; dst16 := src16
   26                     mov16   .macro
   27                             .if \?1 = ARG_IMMED
   28                             mov #low(\1), \2
   29                             mov #high(\1), \2+1
   30                             .else
   31                             mov \1, \2
   32                             mov \1+1, \2+1
   33                             .endif
   34                             .endm
   35                     
   36                     ; mov16 src16, dst16
   37                     ; dst16 := [src16 + x]
   38                     mov16sx .macro
   39                             lda \1,x
   40                             sta \2
   41                             lda \1+1,x
   42                             sta \2+1
   43                             .endm
   44                     
   45                     
   46                     ; add16 dst16, src16
   47                     ; dst16 := [dst16] + [src16]
   48                     
   49                     ; add16 dst16, #val16
   50                     ; dst16 := [dst16] + val16
   51                     add16   .macro
   52                             clc
   53                             .if \?2 = ARG_IMMED
   54                             lda \1
   55                             adc #low(\2)
   56                             sta \1
   57                             lda \1+1
   58                             adc #high(\2)
   59                             sta \1+1
   60                             .else
   61                             lda \1
   62                             adc \2
   63                             sta \1
   64                             lda \1+1
   65                             adc \2+1
   66                             sta \1+1
   67                             .endif
   68                             .endm
   69                     
   70                     ; inc16 dst16
   71                     ; dst16 := [dst16] + 1
   72                     inc16   .macro
   73                             add16 \1, #1
   74                             .endm
   75                     
   76                     ; asr16
   77                     asl16   .macro
   78                             asl \1+1
   79                             rol \1
   80                             .endm
   81                     
   82                     ;; converts pascal style strings to C style
   83                     ;; src, dst, size
   84                     strcpyp2c       .macro
   85                             ldy     #0
   86                             ldx     \3
   87                             beq     .endloop\@
   88                     .loop\@:
   89                             mov     [\1], Y, \2, Y
   90                             iny
   91                             dex
   92                             bne     .loop\@
   93                     .endloop\@:
   94                             mov     #0, \2, Y
   95                             .endm
   96                     
   97           0000      debug .equ 0
   98                     debug_p .macro
   99                             .if     debug
  100                             stx     debug_tmp
  101                             sta     debug_tmp_2
  102                             ldx     #0
  103                     .start\@:
  104                             lda     \1, X
  105                             beq     .done\@
  106                             sta     debug_str
  107                             inx
  108                             jmp     .start\@
  109                     .done\@:
  110                             lda     #$0a
  111                             sta     debug_str
  112                             ldx     debug_tmp
  113                             lda     debug_tmp_2
  114                             .endif
  115                             .endm
  116                     
  117                     
  118                     ; some ppu stuff
  119           3F00      bgpal   .equ $3f00
  120           2020      bgnam   .equ $2020
  121                     
  122                     ppua    .macro
  123                             .if \?1 = ARG_IMMED
  124                             mov #high(\1), $2006
  125                             mov #low(\1), $2006
  126                             .else
  127                             mov \1+1, $2006
  128                             mov \1, $2006
  129                             .endif
  130                             .endm
  131                     
  132                     ppuw    .macro
  133                             mov \1, $2007
  134                             .endm
  135                     
  136                     
  137                     
#[1]   escape.asm
#[2]   tiles.mac
    5                             .include "tiles.mac"
    1                     ;;; macro to set a tile  (tile, pos, off)
    2                             .macro  set_tile
    3                             mov     \3, tile_offset
    4                             mov     \2, tile_pos
    5                             mov16   \1, tile
    6                             jsr     draw_tile
    7                             .endm
#[1]   escape.asm
    6                                     
    7                     ;;; items
    8                             .inesprg 2
    9                             .ineschr 1
   10                             .inesmir 3
   11                             .inesmap 4
   12                     
   13                     
   14           0000              .zp
   15  --:0000            debug_str:      .ds 1
   16  --:0001            debug_num:      .ds 1
   17  --:0002            debug_tmp:      .ds 1
   18  --:0003            debug_tmp_2:    .ds 1
   19                     
   20                             
   21  --:0004            tile_pos: .ds   1
   22  --:0005            tile:   .ds     2
   23  --:0007            tiles:  .ds     180
   24                     
   25  --:00BB            level_num:      .ds     1
   26                             
   27  --:00BC            gx:     .ds     1
   28  --:00BD            gy:     .ds     1
   29  --:00BE            gd:     .ds     1
   30                     
   31  --:00BF            idx16:  .ds     2
   32  --:00C1            tmp:    .ds     1
   33  --:00C2            tmp_2:  .ds     1
   34  --:00C3            tmp_3:  .ds     1
   35  --:00C4            tmp_4:  .ds     1
   36  --:00C5            tmp_5:  .ds     1
   37  --:00C6            tmp16:  .ds     2
   38  --:00C8            tmp16_2: .ds    2
   39  --:00CA            tmp_size: .ds   2
   40  --:00CC            tmp_addr: .ds   2
   41                     
   42  --:00CE            x_scroll: .ds   1
   43                             
   44  --:00CF            level_addr:     .ds     3
   45                     
   46                                     
   47                                     
   48           0200              .bss
   49                     
   50  --:0200            sprite: .ds     256
   51  --:0300            otiles: .ds     180
   52  --:03B4            dests:  .ds     180
   53  --:0468            flags:  .ds     180
   54  --:051C            title:  .ds     36
   55  --:0540            author: .ds     20
   56                                     
   57                     
   58                             
   59                     ;;; initialize
   60           E000              .code
   61           0001              .bank   1
   62           8000              .org    $8000
   63                             
   64                     
   65                                     
   66           0002              .bank   2
   67           C000              .org    $C000
   68                             
#[2]   interrupts.asm
   69                             .include "interrupts.asm"
    1  02:C000  78        intr:   sei
    2  02:C001  40                rti
    3                     
    4  02:C002            nmi:    
    5  02:C002  40                rti
#[1]   escape.asm
   70                     
   71                                     
   72  02:C003  78        start:  sei
   73  02:8004                    mov     #0, level_num
   74                     
   75  02:C009            start2:         
   76  02:C009  A9 00             lda     #0
   77  02:C00B  8D 00 20          sta     $2000
   78  02:C00E  8D 01 20          sta     $2001
   79                     
   80  02:C011  20 66 C2          jsr     init_sprite_memory
   81                             
   82  02:8014                    debug_p ds_begin
   83                             
   84  02:C014  20 18 C2          jsr     vwait   
   85  02:C017  20 18 C2          jsr     vwait
   86  02:C01A  20 18 C2          jsr     vwait   
   87  02:C01D  20 18 C2          jsr     vwait
   88                     
   89                             
   90                     
   91                     ;;; draw item
   92  02:C020  20 18 C2          jsr     vwait
   93                     
   94  02:C023  A9 3F             lda     #$3f
   95  02:C025  8D 06 20          sta     $2006
   96  02:C028  A9 00             lda     #$00
   97  02:C02A  8D 06 20          sta     $2006
   98  02:C02D  8D 05 20          sta     $2005
   99  02:C030  8D 05 20          sta     $2005
  100                     
#[2]   palettes.asm
  101                             .include "palettes.asm" 
    1                     ;;; palette 0
    2  02:C033  A9 0E             lda     #$0e            ; black
    3  02:C035  8D 07 20          sta     $2007
    4  02:C038  A9 2D             lda     #$2d            ; 50gray
    5  02:C03A  8D 07 20          sta     $2007
    6  02:C03D  A9 3D             lda     #$3d            ; 25gray
    7  02:C03F  8D 07 20          sta     $2007
    8  02:C042  A9 38             lda     #$38            ; orange
    9  02:C044  8D 07 20          sta     $2007
   10                     
   11                     ;;; palette 1
   12  02:C047  A9 0E             lda     #$0e
   13  02:C049  8D 07 20          sta     $2007
   14  02:C04C  A9 16             lda     #$16            ; red
   15  02:C04E  8D 07 20          sta     $2007
   16  02:C051  A9 3D             lda     #$3d            ; gray
   17  02:C053  8D 07 20          sta     $2007
   18  02:C056  A9 28             lda     #$28            ; yellow
   19  02:C058  8D 07 20          sta     $2007
   20                             
   21                             
   22                     ;;; palette 2
   23  02:C05B  A9 0E             lda     #$0e            ; black
   24  02:C05D  8D 07 20          sta     $2007
   25  02:C060  A9 12             lda     #$12            ; blue
   26  02:C062  8D 07 20          sta     $2007
   27  02:C065  A9 3D             lda     #$3D            ; gray
   28  02:C067  8D 07 20          sta     $2007
   29  02:C06A  A9 17             lda     #$17            ; brownish
   30  02:C06C  8D 07 20          sta     $2007
   31                             
   32                             
   33                     ;;; palette 3
   34  02:C06F  A9 0E             lda     #$0e            ; black
   35  02:C071  8D 07 20          sta     $2007
   36  02:C074  A9 19             lda     #$19            ; green
   37  02:C076  8D 07 20          sta     $2007
   38  02:C079  A9 3D             lda     #$3d            ; gray
   39  02:C07B  8D 07 20          sta     $2007
   40  02:C07E  A9 12             lda     #$12            ; blue
   41  02:C080  8D 07 20          sta     $2007
   42                     
   43                             
   44                     ;;; sprite palette 1
   45  02:C083  A9 3F             lda     #$3f
   46  02:C085  8D 06 20          sta     $2006
   47  02:C088  A9 11             lda     #$11
   48  02:C08A  8D 06 20          sta     $2006
   49  02:C08D  A9 18             lda     #$18            ; brown
   50  02:C08F  8D 07 20          sta     $2007
   51  02:C092  A9 36             lda     #$36            ; pink
   52  02:C094  8D 07 20          sta     $2007
   53  02:C097  A9 2C             lda     #$2C            ; blue
   54  02:C099  8D 07 20          sta     $2007
#[1]   escape.asm
  102                                     
  103  02:C09C  20 18 C2          jsr     vwait
  104  02:C09F  20 18 C2          jsr     vwait
  105                     
  106                     
  107  02:C0A2  20 BE C0          jsr     choose_level
  108                             
  109  02:C0A5  20 18 C2          jsr     vwait
  110                             
  111  02:C0A8            ppu_on: 
  112  02:80A8                    debug_p ds_ppu
  113  02:C0A8  20 18 C2          jsr     vwait
  114  02:C0AB  A9 00             lda     #%00000000
  115  02:C0AD  8D 00 20          sta     $2000
  116  02:C0B0  A9 1A             lda     #%00011010
  117  02:C0B2  8D 01 20          sta     $2001
  118                     
  119  02:C0B5            main_loop:
  120  02:C0B5  20 AF C1          jsr     handle_joy
  121  02:C0B8  20 18 C2          jsr     vwait
  122  02:C0BB  4C B5 C0          jmp     main_loop
  123                     
  124                             
  125  02:C0BE            choose_level:
  126  02:C0BE  AD BB 00          lda     level_num
  127  02:C0C1  D0 0D             bne     .l1
  128  02:80C3                    mov16   #sample_level01, level_addr
  129  02:C0CD  4C A2 C1          jmp     .go
  130  02:C0D0  AD BB 00  .l1:    lda     level_num
  131  02:C0D3  C9 01             cmp     #1
  132  02:C0D5  D0 0D             bne     .l2
  133  02:80D7                    mov16   #sample_level02, level_addr
  134  02:C0E1  4C A2 C1          jmp     .go
  135  02:C0E4  AD BB 00  .l2:    lda     level_num
  136  02:C0E7  C9 02             cmp     #2
  137  02:C0E9  D0 0D             bne     .l3
  138  02:80EB                    mov16   #sample_level02, level_addr
  139  02:C0F5  4C A2 C1          jmp     .go
  140  02:C0F8  AD BB 00  .l3:    lda     level_num
  141  02:C0FB  C9 03             cmp     #3
  142  02:C0FD  D0 0D             bne     .l4
  143  02:80FF                    mov16   #sample_level03, level_addr
  144  02:C109  4C A2 C1          jmp     .go
  145  02:C10C  AD BB 00  .l4:    lda     level_num
  146  02:C10F  C9 04             cmp     #4
  147  02:C111  D0 0D             bne     .l5
  148  02:8113                    mov16   #sample_level04, level_addr
  149  02:C11D  4C A2 C1          jmp     .go
  150  02:C120  AD BB 00  .l5:    lda     level_num
  151  02:C123  C9 05             cmp     #5
  152  02:C125  D0 0D             bne     .l6
  153  02:8127                    mov16   #sample_level05, level_addr
  154  02:C131  4C A2 C1          jmp     .go
  155  02:C134  AD BB 00  .l6:    lda     level_num
  156  02:C137  C9 06             cmp     #6
  157  02:C139  D0 0D             bne     .l7
  158  02:813B                    mov16   #sample_level06, level_addr
  159  02:C145  4C A2 C1          jmp     .go
  160  02:C148  AD BB 00  .l7:    lda     level_num
  161  02:C14B  C9 07             cmp     #7
  162  02:C14D  D0 0D             bne     .l8
  163  02:814F                    mov16   #sample_level07, level_addr
  164  02:C159  4C A2 C1          jmp     .go
  165  02:C15C  AD BB 00  .l8:    lda     level_num
  166  02:C15F  C9 08             cmp     #8
  167  02:C161  D0 0D             bne     .l9
  168  02:8163                    mov16   #sample_level08, level_addr
  169  02:C16D  4C A2 C1          jmp     .go
  170  02:C170  AD BB 00  .l9:    lda     level_num
  171  02:C173  C9 09             cmp     #9
  172  02:C175  D0 0D             bne     .l10
  173  02:8177                    mov16   #sample_level09, level_addr
  174  02:C181  4C A2 C1          jmp     .go
  175  02:C184  AD BB 00  .l10:   lda     level_num
  176  02:C187  C9 0A             cmp     #10
  177  02:C189  D0 0D             bne     .l11
  178  02:818B                    mov16   #sample_level10, level_addr
  179  02:C195  4C A2 C1          jmp     .go
  180  02:8198            .l11:   mov16   #sample_level11, level_addr
  181                                     
  182  02:C1A2            .go:    
  183  02:C1A2  20 3D C5          jsr     load_level
  184  02:C1A5  20 71 C2          jsr     draw_guy
  185                     
  186  02:C1A8  20 18 C2          jsr     vwait
  187  02:C1AB  20 36 C2          jsr     draw_level
  188                     
  189  02:C1AE  60                rts
  190                             
  191                             
  192  02:C1AF            handle_joy:
  193                             ;; joystick
  194  02:C1AF  A9 01             lda     #1
  195  02:C1B1  8D 16 40          sta     $4016
  196  02:C1B4  A9 00             lda     #0
  197  02:C1B6  8D 16 40          sta     $4016
  198                     
  199  02:C1B9  AD 16 40          lda     $4016
  200  02:C1BC  AD 16 40          lda     $4016
  201  02:C1BF  AD 16 40          lda     $4016
  202                             
  203  02:C1C2  AD 16 40          lda     $4016
  204  02:C1C5  29 01             and     #%00000001      ; start
  205  02:C1C7  F0 12             beq     .j_up
  206  02:C1C9  EE BB 00          inc     level_num
  207  02:C1CC  AD BB 00          lda     level_num
  208  02:C1CF  C9 0C             cmp     #12
  209  02:C1D1  D0 05             bne     .continue
  210  02:C1D3  A9 00             lda     #0
  211  02:C1D5  8D BB 00          sta     level_num
  212                             
  213  02:C1D8            .continue
  214  02:C1D8  4C 09 C0          jmp     start2
  215                             
  216  02:C1DB            .j_up:  
  217  02:C1DB  AD 16 40          lda     $4016
  218  02:C1DE  29 01             and     #%00000001
  219  02:C1E0  F0 08             beq     .j_down         ; up
  220  02:81E2                    mov     #dir_up, gd
  221  02:C1E7  20 71 C2          jsr     draw_guy
  222                     
  223  02:C1EA            .j_down:
  224  02:C1EA  AD 16 40          lda     $4016
  225  02:C1ED  29 01             and     #%00000001
  226  02:C1EF  F0 08             beq     .j_left         ; down
  227  02:81F1                    mov     #dir_down, gd
  228  02:C1F6  20 71 C2          jsr     draw_guy
  229                     
  230  02:C1F9            .j_left:
  231  02:C1F9  AD 16 40          lda     $4016
  232  02:C1FC  29 01             and     #%00000001
  233  02:C1FE  F0 08             beq     .j_right
  234  02:8200                    mov     #dir_left, gd
  235  02:C205  20 71 C2          jsr     draw_guy
  236                     
  237                                                     ; left
  238  02:C208            .j_right:
  239  02:C208  AD 16 40          lda     $4016
  240  02:C20B  29 01             and     #%00000001
  241  02:C20D  F0 08             beq     .done
  242  02:820F                    mov     #dir_right, gd
  243  02:C214  20 71 C2          jsr     draw_guy
  244                                                     ; right
  245  02:C217            .done:  
  246  02:C217  60                rts
  247                     
  248                             
  249  02:C218            vwait:  
  250  02:C218  AD 02 20          lda     $2002
  251  02:C21B  10 FB             bpl     vwait
  252                     
  253  02:C21D  A9 00             lda     #0
  254  02:C21F  8D 06 20          sta     $2006
  255  02:C222  8D 06 20          sta     $2006
  256  02:C225  AD CE 00          lda     x_scroll
  257  02:C228  8D 05 20          sta     $2005
  258  02:C22B  A9 00             lda     #0
  259  02:C22D  8D 05 20          sta     $2005
  260                     
  261  02:C230  A9 02             lda     #sprite/$100    ; sprite
  262  02:C232  8D 14 40          sta     $4014
  263  02:C235  60                rts
  264                     
  265                     
  266  02:C236            draw_level:
  267                             ;; assumes load_level just called
  268  02:8236                    mov     #0, tile_pos
  269  02:C23B  AD 04 00  .loop:  lda     tile_pos
  270  02:C23E  C9 B4             cmp     #180
  271  02:C240  F0 23             beq     .done
  272  02:C242  89 04             bit     #%00000100
  273  02:C244  D0 03             bne     .continue
  274  02:C246  20 18 C2          jsr     vwait
  275  02:C249            .continue:      
  276  02:C249  AE 04 00          ldx     tile_pos
  277                     
  278                             ;; get the tile
  279  02:C24C  BD 07 00          lda     tiles, X
  280  02:C24F  AA                tax
  281  02:C250  BD 10 C8          lda     tile_name_table, X
  282  02:C253  8D 05 00          sta     tile
  283  02:C256  BD 43 C8          lda     tile_attr_table, X
  284  02:C259  8D 06 00          sta     tile+1  
  285                     
  286  02:C25C  20 04 C4          jsr     draw_tile
  287  02:C25F  EE 04 00          inc     tile_pos
  288  02:C262  4C 3B C2          jmp     .loop
  289                                     
  290  02:C265  60        .done:  rts
  291                     
  292                     
  293  02:C266            init_sprite_memory:
  294  02:C266  A2 FF             ldx     #$FF
  295  02:C268  F0 06     .loop:  beq     .end    
  296  02:826A                    mov     #$FF, sprite, X
  297  02:C26F  CA                dex
  298  02:C270  60        .end:   rts
  299                     
  300                     
  301                             
  302  02:C271            draw_guy:
  303  02:8271                    debug_p ds_draw_guy
  304  02:C271  AD BC 00          lda     gx
  305  02:C274  0A                asl     a
  306  02:C275  0A                asl     a
  307  02:C276  0A                asl     a
  308  02:C277  0A                asl     a
  309  02:C278  38                sec
  310  02:C279  ED CE 00          sbc     x_scroll
  311  02:C27C  AA                tax
  312                             
  313  02:C27D  AD BD 00          lda     gy
  314  02:C280  0A                asl     a
  315  02:C281  0A                asl     a
  316  02:C282  0A                asl     a
  317  02:C283  0A                asl     a
  318  02:C284  18                clc
  319  02:C285  69 2F             adc     #$2F
  320  02:C287  A8                tay     
  321                     
  322  02:C288  AD BE 00          lda     gd
  323  02:C28B  8D 01 00          sta     debug_num
  324  02:C28E  C9 01             cmp     #dir_up
  325  02:C290  F0 15             beq     .up
  326                     
  327  02:C292            .compare2:      
  328  02:C292  C9 02             cmp     #dir_down
  329  02:C294  F0 0B             beq     .down_trampoline
  330  02:C296  C9 04             cmp     #dir_right
  331  02:C298  F0 0A             beq     .right_trampoline
  332  02:C29A  C9 03             cmp     #dir_left
  333  02:C29C  F0 00             beq     .left_trampoline
  334                     
  335  02:C29E            .left_trampoline:
  336  02:C29E  4C 55 C3          jmp     .left   
  337  02:C2A1            .down_trampoline:
  338  02:C2A1  4C FE C2          jmp     .down
  339  02:C2A4            .right_trampoline:
  340  02:C2A4  4C AC C3          jmp     .right
  341                     
  342  02:C2A7            .up:
  343  02:C2A7  8C 00 02          sty     sprite
  344  02:C2AA  AD 02 C8          lda     guy_u_tile
  345  02:C2AD  8D 01 02          sta     sprite+1
  346  02:C2B0  A9 00             lda     #0
  347  02:C2B2  8D 02 02          sta     sprite+2
  348  02:C2B5  8E 03 02          stx     sprite+3
  349                     
  350  02:C2B8  8C 04 02          sty     sprite+4
  351  02:C2BB  AD 03 C8          lda     guy_u_tile+1
  352  02:C2BE  8D 05 02          sta     sprite+5
  353  02:C2C1  A9 00             lda     #0
  354  02:C2C3  8D 06 02          sta     sprite+6
  355  02:C2C6  8A                txa
  356  02:C2C7  18                clc
  357  02:C2C8  69 08             adc     #$8
  358  02:C2CA  8D 07 02          sta     sprite+7
  359                     
  360  02:C2CD  98                tya
  361  02:C2CE  18                clc
  362  02:C2CF  69 08             adc     #$8
  363  02:C2D1  8D 08 02          sta     sprite+8
  364  02:C2D4  AD 04 C8          lda     guy_u_tile+2
  365  02:C2D7  8D 09 02          sta     sprite+9
  366  02:C2DA  A9 00             lda     #0
  367  02:C2DC  8D 0A 02          sta     sprite+10
  368  02:C2DF  8E 0B 02          stx     sprite+11
  369                     
  370  02:C2E2  98                tya
  371  02:C2E3  18                clc
  372  02:C2E4  69 08             adc     #$8
  373  02:C2E6  8D 0C 02          sta     sprite+12
  374  02:C2E9  AD 05 C8          lda     guy_u_tile+3
  375  02:C2EC  8D 0D 02          sta     sprite+13
  376  02:C2EF  A9 00             lda     #0
  377  02:C2F1  8D 0E 02          sta     sprite+14
  378  02:C2F4  8A                txa
  379  02:C2F5  18                clc
  380  02:C2F6  69 08             adc     #$8
  381  02:C2F8  8D 0F 02          sta     sprite+15
  382                     
  383  02:C2FB  4C 03 C4          jmp     .done
  384  02:C2FE            .down:  
  385  02:C2FE  8C 00 02          sty     sprite
  386  02:C301  AD 06 C8          lda     guy_d_tile
  387  02:C304  8D 01 02          sta     sprite+1
  388  02:C307  A9 00             lda     #0
  389  02:C309  8D 02 02          sta     sprite+2
  390  02:C30C  8E 03 02          stx     sprite+3
  391                     
  392  02:C30F  8C 04 02          sty     sprite+4
  393  02:C312  AD 07 C8          lda     guy_d_tile+1
  394  02:C315  8D 05 02          sta     sprite+5
  395  02:C318  A9 00             lda     #0
  396  02:C31A  8D 06 02          sta     sprite+6
  397  02:C31D  8A                txa
  398  02:C31E  18                clc
  399  02:C31F  69 08             adc     #$8
  400  02:C321  8D 07 02          sta     sprite+7
  401                     
  402  02:C324  98                tya
  403  02:C325  18                clc
  404  02:C326  69 08             adc     #$8
  405  02:C328  8D 08 02          sta     sprite+8
  406  02:C32B  AD 08 C8          lda     guy_d_tile+2
  407  02:C32E  8D 09 02          sta     sprite+9
  408  02:C331  A9 00             lda     #0
  409  02:C333  8D 0A 02          sta     sprite+10
  410  02:C336  8E 0B 02          stx     sprite+11
  411                     
  412  02:C339  98                tya
  413  02:C33A  18                clc
  414  02:C33B  69 08             adc     #$8
  415  02:C33D  8D 0C 02          sta     sprite+12
  416  02:C340  AD 09 C8          lda     guy_d_tile+3
  417  02:C343  8D 0D 02          sta     sprite+13
  418  02:C346  A9 00             lda     #0
  419  02:C348  8D 0E 02          sta     sprite+14
  420  02:C34B  8A                txa
  421  02:C34C  18                clc
  422  02:C34D  69 08             adc     #$8
  423  02:C34F  8D 0F 02          sta     sprite+15
  424                     
  425  02:C352  4C 03 C4          jmp     .done
  426                     
  427  02:C355            .left:  
  428  02:C355  8C 00 02          sty     sprite
  429  02:C358  AD 0A C8          lda     guy_l_tile
  430  02:C35B  8D 01 02          sta     sprite+1
  431  02:C35E  A9 00             lda     #0
  432  02:C360  8D 02 02          sta     sprite+2
  433  02:C363  8E 03 02          stx     sprite+3
  434                     
  435  02:C366  8C 04 02          sty     sprite+4
  436  02:C369  AD 0B C8          lda     guy_l_tile+1
  437  02:C36C  8D 05 02          sta     sprite+5
  438  02:C36F  A9 00             lda     #0
  439  02:C371  8D 06 02          sta     sprite+6
  440  02:C374  8A                txa
  441  02:C375  18                clc
  442  02:C376  69 08             adc     #$8
  443  02:C378  8D 07 02          sta     sprite+7
  444                     
  445  02:C37B  98                tya
  446  02:C37C  18                clc
  447  02:C37D  69 08             adc     #$8
  448  02:C37F  8D 08 02          sta     sprite+8
  449  02:C382  AD 0C C8          lda     guy_l_tile+2
  450  02:C385  8D 09 02          sta     sprite+9
  451  02:C388  A9 00             lda     #0
  452  02:C38A  8D 0A 02          sta     sprite+10
  453  02:C38D  8E 0B 02          stx     sprite+11
  454                     
  455  02:C390  98                tya
  456  02:C391  18                clc
  457  02:C392  69 08             adc     #$8
  458  02:C394  8D 0C 02          sta     sprite+12
  459  02:C397  AD 0D C8          lda     guy_l_tile+3
  460  02:C39A  8D 0D 02          sta     sprite+13
  461  02:C39D  A9 00             lda     #0
  462  02:C39F  8D 0E 02          sta     sprite+14
  463  02:C3A2  8A                txa
  464  02:C3A3  18                clc
  465  02:C3A4  69 08             adc     #$8
  466  02:C3A6  8D 0F 02          sta     sprite+15
  467                     
  468  02:C3A9  4C 03 C4          jmp     .done
  469                             
  470  02:C3AC            .right:
  471  02:C3AC  8C 00 02          sty     sprite
  472  02:C3AF  AD 0B C8          lda     guy_l_tile+1
  473  02:C3B2  8D 01 02          sta     sprite+1
  474  02:C3B5  A9 40             lda     #%01000000
  475  02:C3B7  8D 02 02          sta     sprite+2
  476  02:C3BA  8E 03 02          stx     sprite+3
  477                     
  478  02:C3BD  8C 04 02          sty     sprite+4
  479  02:C3C0  AD 0A C8          lda     guy_l_tile
  480  02:C3C3  8D 05 02          sta     sprite+5
  481  02:C3C6  A9 40             lda     #%01000000
  482  02:C3C8  8D 06 02          sta     sprite+6
  483  02:C3CB  8A                txa
  484  02:C3CC  18                clc
  485  02:C3CD  69 08             adc     #$8
  486  02:C3CF  8D 07 02          sta     sprite+7
  487                     
  488  02:C3D2  98                tya
  489  02:C3D3  18                clc
  490  02:C3D4  69 08             adc     #$8
  491  02:C3D6  8D 08 02          sta     sprite+8
  492  02:C3D9  AD 0D C8          lda     guy_l_tile+3
  493  02:C3DC  8D 09 02          sta     sprite+9
  494  02:C3DF  A9 40             lda     #%01000000
  495  02:C3E1  8D 0A 02          sta     sprite+10
  496  02:C3E4  8E 0B 02          stx     sprite+11
  497                     
  498  02:C3E7  98                tya
  499  02:C3E8  18                clc
  500  02:C3E9  69 08             adc     #$8
  501  02:C3EB  8D 0C 02          sta     sprite+12
  502  02:C3EE  AD 0C C8          lda     guy_l_tile+2
  503  02:C3F1  8D 0D 02          sta     sprite+13
  504  02:C3F4  A9 40             lda     #%01000000
  505  02:C3F6  8D 0E 02          sta     sprite+14
  506  02:C3F9  8A                txa
  507  02:C3FA  18                clc
  508  02:C3FB  69 08             adc     #$8
  509  02:C3FD  8D 0F 02          sta     sprite+15
  510                     
  511  02:C400  4C 03 C4          jmp     .done
  512                     
  513  02:C403            .done:  
  514  02:C403  60                rts
  515                     
  516                             
  517  02:C404            draw_tile:
  518           00C6      screen_pos .equ tmp16
  519  02:C404  AE 04 00          ldx     tile_pos
  520  02:8407                    mov     tile_pos_table_2, X, screen_pos+1
  521  02:840D                    mov     tile_pos_table_1, X, screen_pos
  522                     
  523  02:8413                    add16   screen_pos, #$20C0
  524                     
  525  02:C424  AD C6 00          lda     screen_pos
  526  02:C427  0A                asl     a
  527  02:C428  AD C7 00          lda     screen_pos+1
  528  02:C42B  2A                rol     a
  529  02:C42C  29 07             and     #%00000111
  530  02:C42E  0A                asl     a
  531  02:C42F  0A                asl     a
  532  02:C430  0A                asl     a
  533  02:C431  8D C9 00          sta     tmp16_2+1
  534  02:C434  AD C6 00          lda     screen_pos
  535  02:C437  29 1C             and     #%00011100
  536  02:C439  4A                lsr     a
  537  02:C43A  4A                lsr     a
  538  02:C43B  0D C9 00          ora     tmp16_2+1
  539  02:C43E  69 C0             adc     #$C0    
  540                     
  541  02:C440  8D C1 00          sta     tmp
  542  02:C443  AD C7 00          lda     screen_pos+1
  543  02:C446  29 FC             and     #%11111100
  544  02:C448  18                clc
  545  02:C449  69 03             adc     #$3     
  546  02:C44B  8D 06 20          sta     $2006           ; set address of thing
  547  02:C44E  A8                tay
  548  02:C44F  AD C1 00          lda     tmp
  549  02:C452  8D 06 20          sta     $2006   
  550  02:C455  AE 07 20          ldx     $2007           ; invalid data
  551  02:C458  AE 07 20          ldx     $2007           ; correct data
  552  02:C45B  8C 06 20          sty     $2006           ; reset address
  553  02:C45E  8D 06 20          sta     $2006
  554                     
  555  02:C461  AD C6 00          lda     screen_pos      ; find the bit
  556  02:C464  29 42             and     #%01000010
  557  02:C466  D0 12             bne     .test1
  558  02:C468  AD 06 00          lda     tile+1
  559  02:C46B  29 03             and     #%00000011
  560  02:C46D  8D C1 00          sta     tmp
  561  02:C470  8A                txa
  562  02:C471  0D C1 00          ora     tmp
  563  02:C474  8D 07 20          sta     $2007           ; set the color
  564  02:C477  4C B5 C4          jmp     .update_tile
  565                     
  566  02:C47A  C9 02     .test1: cmp     #%00000010
  567  02:C47C  D0 12             bne     .test2
  568  02:C47E  AD 06 00          lda     tile+1
  569  02:C481  29 0C             and     #%00001100
  570  02:C483  8D C1 00          sta     tmp
  571  02:C486  8A                txa
  572  02:C487  0D C1 00          ora     tmp
  573  02:C48A  8D 07 20          sta     $2007
  574  02:C48D  4C B5 C4          jmp     .update_tile
  575                     
  576  02:C490  C9 40     .test2: cmp     #%01000000
  577  02:C492  D0 12             bne     .test3
  578  02:C494  AD 06 00          lda     tile+1
  579  02:C497  29 30             and     #%00110000
  580  02:C499  8D C1 00          sta     tmp
  581  02:C49C  8A                txa
  582  02:C49D  0D C1 00          ora     tmp
  583  02:C4A0  8D 07 20          sta     $2007
  584  02:C4A3  4C B5 C4          jmp     .update_tile
  585                     
  586  02:C4A6  AD 06 00  .test3: lda     tile+1
  587  02:C4A9  29 C0             and     #%11000000
  588  02:C4AB  8D C1 00          sta     tmp
  589  02:C4AE  8A                txa
  590  02:C4AF  0D C1 00          ora     tmp
  591  02:C4B2  8D 07 20          sta     $2007
  592                             
  593                     
  594  02:C4B5            .update_tile:                                           
  595  02:C4B5  AD C7 00          lda     tmp16+1
  596  02:C4B8  8D 06 20          sta     $2006
  597  02:C4BB  AD C6 00          lda     tmp16
  598  02:C4BE  8D 06 20          sta     $2006
  599  02:C4C1  AD 05 00          lda     tile
  600  02:C4C4  8D 07 20          sta     $2007           ; update the tile
  601                     
  602  02:84C7                    add16   tmp16, #1       ; next part (right)
  603  02:C4D8  AD C7 00          lda     tmp16+1
  604  02:C4DB  8D 06 20          sta     $2006
  605  02:C4DE  AD C6 00          lda     tmp16
  606  02:C4E1  8D 06 20          sta     $2006
  607  02:C4E4  EE 05 00          inc     tile
  608  02:C4E7  AD 05 00          lda     tile
  609  02:C4EA  8D 07 20          sta     $2007           ; update the tile
  610                     
  611  02:84ED                    add16   tmp16, #$20     ; next part (down)
  612  02:C4FE  AD C7 00          lda     tmp16+1
  613  02:C501  8D 06 20          sta     $2006
  614  02:C504  AD C6 00          lda     tmp16
  615  02:C507  8D 06 20          sta     $2006
  616  02:C50A  AD 05 00          lda     tile
  617  02:C50D  18                clc
  618  02:C50E  69 10             adc     #$10
  619  02:C510  8D 05 00          sta     tile
  620  02:C513  8D 07 20          sta     $2007           ; update the tile
  621                     
  622  02:8516                    add16   tmp16, #$FFFF   ; last part (left)
  623  02:C527  AD C7 00          lda     tmp16+1
  624  02:C52A  8D 06 20          sta     $2006
  625  02:C52D  AD C6 00          lda     tmp16
  626  02:C530  8D 06 20          sta     $2006
  627  02:C533  CE 05 00          dec     tile
  628  02:C536  AD 05 00          lda     tile
  629  02:C539  8D 07 20          sta     $2007           ; update the tile
  630                     
  631  02:C53C  60                rts
  632                     
  633                     
  634                     
  635  02:C53D            load_level:
  636  02:853D                    mov     #0, tmp_size+1
  637  02:8542                    mov     #dir_right, gd
  638  02:8547                    mov     #0, x_scroll
  639                                             
  640  02:854C                    mov16   level_addr, idx16
  641  02:C558  A0 00             ldy     #0
  642  02:855A                    mov     [idx16], Y, tmp
  643  02:C55F  C8                iny
  644  02:8560                    mov     [idx16], Y, tmp
  645  02:C565  C8                iny
  646  02:8566                    mov     [idx16], Y, tmp
  647  02:C56B  C8                iny
  648  02:856C                    mov     [idx16], Y, tmp
  649  02:C571  A0 0F             ldy     #15             ; ESXL + width + height + MSB of size of title
  650  02:8573                    mov     [idx16], Y, tmp_size    ; size of title string
  651  02:8578                    add16   idx16, #16              ; move to start of title
  652                     
  653                             ;; copy the title string
  654  02:8589                    strcpyp2c       idx16, title, tmp_size
  655                     
  656  02:859E                    add16   idx16, tmp_size ; move past the title string
  657  02:C5B1  A0 03             ldy     #3              ; MSB of size of author
  658  02:85B3                    mov     [idx16], Y, tmp_size ; size of author string
  659  02:85B8                    add16   idx16, #4       ; move to start of author
  660                     
  661                             ;; copy the author string
  662  02:85C9                    strcpyp2c       idx16, author, tmp_size
  663                     
  664  02:85DE                    add16   idx16, tmp_size ; move past the author string
  665                     
  666  02:C5F1  A0 03             ldy     #3              ; MSB of guy x
  667  02:85F3                    mov     [idx16], Y, gx
  668  02:85F8                    add16   idx16, #4
  669  02:C609  A0 03             ldy     #3              ; MSB of guy y
  670  02:860B                    mov     [idx16], Y, gy
  671  02:8610                    add16   idx16, #4
  672                     
  673                                     
  674                             ;; start rledecoding
  675  02:8621                    mov16   #tiles, tmp_addr
  676  02:C62B  20 6F C6          jsr     rledecode
  677                     
  678                     
  679  02:862E                    debug_p ds_tiles
  680  02:862E                    mov     #tiles, debug_num
  681  02:8633                    mov     (#tiles)+1, debug_num
  682  02:C639  A2 00             ldx     #0
  683  02:C63B            .tile_print:    
  684  02:863B                    mov     tiles, X, debug_num
  685  02:C641  E8                inx
  686  02:C642  8A                txa
  687  02:C643  C9 B4             cmp     #180
  688  02:C645  D0 F4             bne     .tile_print
  689                             
  690  02:8647                    mov16   #otiles, tmp_addr
  691  02:C651  20 6F C6          jsr     rledecode
  692  02:8654                    mov16   #dests, tmp_addr
  693  02:C65E  20 6F C6          jsr     rledecode
  694  02:8661                    mov16   #flags, tmp_addr
  695  02:C66B  20 6F C6          jsr     rledecode
  696                     
  697  02:C66E  60                rts
  698                                     
  699                             
  700                     
#[2]   rle.asm
  701                             .include "rle.asm"                      
    1  02:C66F            rledecode:
    2           00C1      run     .equ tmp
    3           00C2      size    .equ tmp_2
    4           00C3      bytes   .equ tmp_3
    5           00C4      char    .equ tmp_4
    6                     
    7  02:866F                    debug_p ds1
    8  02:866F                    debug_p ds_tmpaddr
    9  02:C66F  AD CC 00          lda     tmp_addr
   10  02:C672  8D 01 00          sta     debug_num
   11  02:C675  AD CD 00          lda     tmp_addr+1
   12  02:C678  8D 01 00          sta     debug_num
   13                             ;; take idx16, read from it and advance it, and store
   14                             ;; result in place pointed by tmp_addr
   15  02:867B                    mov     #180, size      ; size of map
   16  02:C680  A2 00             ldx     #0
   17  02:C682  A0 00             ldy     #0
   18  02:8684                    mov     [idx16], Y, bytes
   19                     
   20  02:8689                    inc16   idx16
   21                     
   22  02:C69A            .loop:  
   23                             ;; read a byte to determine run
   24  02:869A                    mov     [idx16], Y, run
   25  02:869F                    inc16   idx16
   26  02:C6B0  AD C1 00          lda     run
   27  02:C6B3  D0 03             bne     .run
   28  02:C6B5  4C F8 C6          jmp     .anti_run       ; if 0, anti-run
   29  02:C6B8            .run:   
   30                             ;; run
   31  02:86B8                    debug_p ds_run
   32  02:86B8                    mov     #0, char        ; set char to 0
   33  02:C6BD  AD C3 00          lda     bytes           ; check if bytes == 0
   34  02:C6C0  F0 16             beq     .in_run_loop    ; skip and write zeros if bytes == 0
   35                     
   36  02:86C2                    mov     [idx16], Y, char ; read a char, since bytes != 0
   37  02:86C7                    inc16   idx16
   38  02:C6D8            .in_run_loop:
   39  02:86D8                    debug_p ds_x
   40  02:C6D8  8E 01 00          stx     debug_num
   41  02:C6DB  8A                txa
   42  02:C6DC  A8                tay
   43  02:86DD                    mov     char, [tmp_addr], Y ; write the content of the run
   44  02:C6E2  A0 00             ldy     #0
   45  02:C6E4  E8                inx
   46  02:C6E5  CE C2 00          dec     size
   47  02:C6E8  CE C1 00          dec     run
   48  02:C6EB  D0 EB             bne     .in_run_loop
   49                     
   50                             ;; done?
   51  02:C6ED  AD C2 00          lda     size
   52  02:C6F0  D0 03             bne     .loop_trampoline
   53  02:C6F2  4C 41 C7          jmp     .done
   54  02:C6F5            .loop_trampoline:
   55  02:C6F5  4C 9A C6          jmp     .loop
   56                             
   57  02:C6F8            .anti_run:
   58  02:86F8                    debug_p ds_antirun
   59  02:86F8                    mov     [idx16], Y, run ; length of this anti-run
   60  02:86FD                    inc16   idx16
   61  02:C70E            .in_anti_run_loop:
   62  02:C70E  B1 BF             lda     [idx16], Y
   63  02:C710  8D 01 00          sta     debug_num
   64  02:C713  8D C4 00          sta     char
   65  02:C716  8A                txa
   66  02:C717  A8                tay
   67  02:C718  AD C4 00          lda     char
   68  02:C71B  91 CC             sta     [tmp_addr], Y ; write the content of the run
   69  02:C71D  A0 00             ldy     #0
   70                                             
   71  02:871F                    inc16   idx16
   72  02:C730  E8                inx
   73  02:C731  CE C2 00          dec     size
   74  02:C734  CE C1 00          dec     run
   75  02:C737  D0 D5             bne     .in_anti_run_loop
   76                     
   77                             ;; done?
   78  02:C739  AD C2 00          lda     size
   79  02:C73C  F0 03             beq     .done
   80  02:C73E  4C 9A C6          jmp     .loop
   81                             
   82                             
   83  02:C741            .done:          
   84  02:C741  60                rts
#[1]   escape.asm
  702                                     
  703                     ;;; some data
  704                     ;;; data
  705           E000              .data
  706           0002              .bank   2
  707           C800              .org    $C800
#[2]   tiles.inc
  708                             .include "tiles.inc"
    1                     ;;; tiles, as defined in level.h
    2                             
    3           0000              .rsset $0
    4           0000      T_FLOOR .rs 1
    5           0001      T_RED   .rs 1
    6           0002      T_BLUE  .rs 1
    7           0003      T_GREY  .rs 1
    8           0004      T_GREEN .rs 1
    9           0005      T_EXIT  .rs 1
   10           0006      T_HOLE  .rs 1
   11           0007      T_GOLD  .rs 1
   12           0008      T_LASER .rs 1
   13           0009      T_PANEL .rs 1
   14           000A      T_STOP  .rs 1
   15           000B      T_RIGHT .rs 1
   16           000C      T_LEFT  .rs 1
   17           000D      T_UP    .rs 1
   18           000E      T_DOWN  .rs 1
   19           000F      T_ROUGH .rs 1
   20                     
   21           0010      T_ELECTRIC      .rs 1
   22           0011      T_ON    .rs 1
   23           0012      T_OFF   .rs 1
   24           0013      T_TRANSPORT     .rs 1
   25           0014      T_BROKEN        .rs 1
   26           0015      T_LR    .rs 1
   27           0016      T_UD    .rs 1
   28           0017      T_0     .rs 1
   29           0018      T_1     .rs 1
   30           0019      T_NS    .rs 1
   31           001A      T_NE    .rs 1
   32           001B      T_NW    .rs 1
   33           001C      T_SE    .rs 1
   34           001D      T_SW    .rs 1
   35           001E      T_WE    .rs 1
   36           001F      T_BUTTON        .rs 1
   37                     
   38           0020      T_BLIGHT        .rs 1
   39           0021      T_RLIGHT        .rs 1
   40           0022      T_GLIGHT        .rs 1
   41           0023      T_BLACK .rs 1
   42           0024      T_BUP   .rs 1
   43           0025      T_BDOWN .rs 1
   44           0026      T_RUP   .rs 1
   45           0027      T_RDOWN .rs 1
   46           0028      T_GUP   .rs 1
   47           0029      T_GDOWN .rs 1
   48           002A      T_BSPHERE       .rs 1
   49           002B      T_RSPHERE       .rs 1
   50           002C      T_GSPHERE       .rs 1
   51           002D      T_SPHERE        .rs 1
   52           002E      T_UNUSED_1      .rs 1
   53           002F      T_UNUSED_2      .rs 1
   54                     
   55           0030      T_BPANEL        .rs 1
   56           0031      T_RPANEL        .rs 1
   57           0032      T_GPANEL        .rs 1
   58                     
   59  02:C800            letter_start:
   60  02:C800  A0                .db $A0
   61  02:C801            laser_sprite_byte:
   62  02:C801  04                .db 4
   63                     
   64           0001      dir_up          .equ 1
   65           0002      dir_down        .equ 2
   66           0003      dir_left        .equ 3
   67           0004      dir_right       .equ 4
   68                     
   69  02:C802            guy_u_tile:
   70  02:C802  E0 E1 F0          .db $E0,$E1,$F0,$F1
       02:C805  F1        
   71  02:C806            guy_d_tile:
   72  02:C806  E2 E3 F2          .db $E2,$E3,$F2,$F3
       02:C809  F3        
   73  02:C80A            guy_l_tile:
   74  02:C80A  E4 E5 F4          .db $E4,$E5,$F4,$F5
       02:C80D  F5        
   75  02:C80E            laser_tile:
   76  02:C80E  E6 F6             .db $E6, $F6
   77                     
   78                             
   79  02:C810            tile_name_table:
   80  02:C810  6C 02 02          .db $6C,$02,$02,$02,$02,$04,$06,$6E,$08,$44,$0A,$20,$24,$26,$22,$0C, ...
       02:C813  02 02 04  
       02:C816  06 6E 08  
       02:C819  44 0A 20  
       02:C81C  24 26 22  
       02:C81F  0C 80 28  
       02:C822  2A 0E 46  
       02:C825  2C 2E 40  
       02:C828  42 48 4A  
       02:C82B  4C 4E 60  
       02:C82E  62 64 66  
       02:C831  66 66 00  
       02:C834  68 6C 68  
       02:C837  6C 68 6C  
       02:C83A  6A 6A 6A  
       02:C83D  6A 00 00  
       02:C840  82 82 82  
   84                     
   85  02:C843            tile_attr_table:
   86  02:C843  00 55 AA          .db $00,$55,$AA,$00,$FF,$AA,$00,$00,$55,$00,$55,$00,$00,$00,$00,$00, ...
       02:C846  00 FF AA  
       02:C849  00 00 55  
       02:C84C  00 55 00  
       02:C84F  00 00 00  
       02:C852  00 55 55  
       02:C855  00 00 00  
       02:C858  00 00 00  
       02:C85B  00 00 00  
       02:C85E  00 00 00  
       02:C861  00 00 AA  
       02:C864  55 FF 00  
       02:C867  AA AA 55  
       02:C86A  55 FF FF  
       02:C86D  AA 55 FF  
       02:C870  00 00 00  
       02:C873  AA 55 FF  
   90                     
   91  02:C876            tile_pos_table_1:
   92  02:C876  00 02 04          .db $00,$02,$04,$06,$08,$0A,$0C,$0E,$10,$12,$14,$16,$18,$1A,$1C,$1E, ...
       02:C879  06 08 0A  
       02:C87C  0C 0E 10  
       02:C87F  12 14 16  
       02:C882  18 1A 1C  
       02:C885  1E 00 02  
       02:C888  40 42 44  
       02:C88B  46 48 4A  
       02:C88E  4C 4E 50  
       02:C891  52 54 56  
       02:C894  58 5A 5C  
       02:C897  5E 40 42  
       02:C89A  80 82 84  
       02:C89D  86 88 8A  
       02:C8A0  8C 8E 90  
       02:C8A3  92 94 96  
       02:C8A6  98 9A 9C  
       02:C8A9  9E 80 82  
       02:C8AC  C0 C2 C4  
       02:C8AF  C6 C8 CA  
       02:C8B2  CC CE D0  
       02:C8B5  D2 D4 D6  
       02:C8B8  D8 DA DC  
       02:C8BB  DE C0 C2  
       02:C8BE  00 02 04  
       02:C8C1  06 08 0A  
       02:C8C4  0C 0E 10  
       02:C8C7  12 14 16  
       02:C8CA  18 1A 1C  
       02:C8CD  1E 00 02  
       02:C8D0  40 42 44  
       02:C8D3  46 48 4A  
       02:C8D6  4C 4E 50  
       02:C8D9  52 54 56  
       02:C8DC  58 5A 5C  
       02:C8DF  5E 40 42  
       02:C8E2  80 82 84  
       02:C8E5  86 88 8A  
       02:C8E8  8C 8E 90  
       02:C8EB  92 94 96  
       02:C8EE  98 9A 9C  
       02:C8F1  9E 80 82  
       02:C8F4  C0 C2 C4  
       02:C8F7  C6 C8 CA  
       02:C8FA  CC CE D0  
       02:C8FD  D2 D4 D6  
       02:C900  D8 DA DC  
       02:C903  DE C0 C2  
       02:C906  00 02 04  
       02:C909  06 08 0A  
       02:C90C  0C 0E 10  
       02:C90F  12 14 16  
       02:C912  18 1A 1C  
       02:C915  1E 00 02  
       02:C918  40 42 44  
       02:C91B  46 48 4A  
       02:C91E  4C 4E 50  
       02:C921  52 54 56  
       02:C924  58 5A 5C  
       02:C927  5E 40 42  
  112  02:C92A            tile_pos_table_2:
  113  02:C92A  00 00 00          .db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00, ...
       02:C92D  00 00 00  
       02:C930  00 00 00  
       02:C933  00 00 00  
       02:C936  00 00 00  
       02:C939  00 04 04  
       02:C93C  00 00 00  
       02:C93F  00 00 00  
       02:C942  00 00 00  
       02:C945  00 00 00  
       02:C948  00 00 00  
       02:C94B  00 04 04  
       02:C94E  00 00 00  
       02:C951  00 00 00  
       02:C954  00 00 00  
       02:C957  00 00 00  
       02:C95A  00 00 00  
       02:C95D  00 04 04  
       02:C960  00 00 00  
       02:C963  00 00 00  
       02:C966  00 00 00  
       02:C969  00 00 00  
       02:C96C  00 00 00  
       02:C96F  00 04 04  
       02:C972  01 01 01  
       02:C975  01 01 01  
       02:C978  01 01 01  
       02:C97B  01 01 01  
       02:C97E  01 01 01  
       02:C981  01 05 05  
       02:C984  01 01 01  
       02:C987  01 01 01  
       02:C98A  01 01 01  
       02:C98D  01 01 01  
       02:C990  01 01 01  
       02:C993  01 05 05  
       02:C996  01 01 01  
       02:C999  01 01 01  
       02:C99C  01 01 01  
       02:C99F  01 01 01  
       02:C9A2  01 01 01  
       02:C9A5  01 05 05  
       02:C9A8  01 01 01  
       02:C9AB  01 01 01  
       02:C9AE  01 01 01  
       02:C9B1  01 01 01  
       02:C9B4  01 01 01  
       02:C9B7  01 05 05  
       02:C9BA  02 02 02  
       02:C9BD  02 02 02  
       02:C9C0  02 02 02  
       02:C9C3  02 02 02  
       02:C9C6  02 02 02  
       02:C9C9  02 06 06  
       02:C9CC  02 02 02  
       02:C9CF  02 02 02  
       02:C9D2  02 02 02  
       02:C9D5  02 02 02  
       02:C9D8  02 02 02  
       02:C9DB  02 06 06  
  133                             
#[1]   escape.asm
  709                     
  710                     
  711  02:C9DE            levels: 
  712  02:C9DE  F6 C9             .dw sample_level01, ...
       02:C9E0  9F CA     
       02:C9E2  40 CB     
       02:C9E4  C9 CB     
       02:C9E6  83 CC     
       02:C9E8  34 CD     
       02:C9EA  B7 CD     
       02:C9EC  4F CE     
       02:C9EE  0F CF     
       02:C9F0  A9 CF     
       02:C9F2  6D D0     
       02:C9F4  31 D1     
  724                     
  725  02:C9F6            sample_level01: 
  726  02:C9F6                    .incbin "levels/tutor01.esx"            
  727  02:CA9F            sample_level02: 
  728  02:CA9F                    .incbin "levels/tutor02.esx"            
  729  02:CB40            sample_level03: 
  730  02:CB40                    .incbin "levels/tutor03.esx"            
  731  02:CBC9            sample_level04: 
  732  02:CBC9                    .incbin "levels/tutor04.esx"            
  733  02:CC83            sample_level05: 
  734  02:CC83                    .incbin "levels/tutor05.esx"            
  735  02:CD34            sample_level06: 
  736  02:CD34                    .incbin "levels/tutor06.esx"            
  737  02:CDB7            sample_level07: 
  738  02:CDB7                    .incbin "levels/tutor07.esx"            
  739  02:CE4F            sample_level08: 
  740  02:CE4F                    .incbin "levels/tutor08.esx"            
  741  02:CF0F            sample_level09: 
  742  02:CF0F                    .incbin "levels/tutor09.esx"            
  743  02:CFA9            sample_level10: 
  744  02:CFA9                    .incbin "levels/tutor10.esx"            
  745  02:D06D            sample_level11: 
  746  02:D06D                    .incbin "levels/tutor11.esx"            
  747  02:D131            sample_level12: 
  748  02:D131                    .incbin "levels/tutor12.esx"            
  749                     
  750                     
  751  02:D209  62 65 67  ds_begin .db    "begin",0
       02:D20C  69 6E 00  
  752  02:D20F  72 6C 65  ds1:    .db     "rledecode",0
       02:D212  64 65 63  
       02:D215  6F 64 65  
       02:D218  00        
  753  02:D219  70 70 75  ds_ppu: .db     "ppu_on",0
       02:D21C  5F 6F 6E  
       02:D21F  00        
  754  02:D220  72 75 6E  ds_run: .db     "run",0
       02:D223  00        
  755  02:D224  61 72 75  ds_antirun:     .db     "arun",0
       02:D227  6E 00     
  756  02:D229  78 00     ds_x:   .db     "x",0
  757  02:D22B  79 00     ds_y:   .db     "y",0
  758  02:D22D  69 00     ds_i:   .db     "i",0
  759  02:D22F  74 6D 70  ds_tmpaddr:     .db     "tmp_addr",0
       02:D232  5F 61 64  
       02:D235  64 72 00  
  760  02:D238  74 69 6C  ds_tiles:       .db     "tiles",0
       02:D23B  65 73 00  
  761  02:D23E  64 72 61  ds_draw_guy     .db     "draw_guy",0
       02:D241  77 5F 67  
       02:D244  75 79 00  
  762                     
  763                                             
  764                     ;;; vectors
  765           0003              .bank   3
  766           FFFA              .org    $FFFA
  767  03:FFFA  02 C0             .dw     nmi,start,intr
       03:FFFC  03 C0     
       03:FFFE  00 C0     
  768                     
  769                     
  770           0004              .bank   4
  771                     
  772  04:0000                    .incbin "escape.chr"
  773  04:1000                    .incbin "debug.chr"
