#[1]   escape.asm
    2                     
#[2]   arg.mac
    3                             .include "arg.mac"
    1           0000      ARG_NONE        .equ 0
    2           0001      ARG_REG         .equ 1
    3           0002      ARG_IMMED       .equ 2
    4           0003      ARG_ABS         .equ 3
    5           0003      ARG_ABSOLUTE    .equ 3
    6           0004      ARG_INDIRECT    .equ 4
    7           0005      ARG_STRING      .equ 5
    8           0006      ARG_LABEL       .equ 6
#[1]   escape.asm
#[2]   common.mac
    4                             .include "common.mac"
    1                     ; mov src, dst
    2                     ; dst := [src]
    3                     mova    .macro
    4                             sta \1
    5                             .endm
    6                     movx    .macro
    7                             stx \1
    8                             .endm
    9                     movy    .macro
   10                             sty \1
   11                             .endm
   12                     mov     .macro
   13                             .if \?1 = ARG_REG
   14                             st\1 \2
   15                             .else
   16                             lda \1
   17                             sta \2
   18                             .endif
   19                             .endm
   20                     
   21                     ; mov16 src16, dst16
   22                     ; dst16 := [src16]
   23                     
   24                     ; mov16 #src16, dst16
   25                     ; dst16 := src16
   26                     mov16   .macro
   27                             .if \?1 = ARG_IMMED
   28                             mov #low(\1), \2
   29                             mov #high(\1), \2+1
   30                             .else
   31                             mov \1, \2
   32                             mov \1+1, \2+1
   33                             .endif
   34                             .endm
   35                     
   36                     ; mov16 src16, dst16
   37                     ; dst16 := [src16 + x]
   38                     mov16sx .macro
   39                             lda \1,x
   40                             sta \2
   41                             lda \1+1,x
   42                             sta \2+1
   43                             .endm
   44                     
   45                     
   46                     ; add16 dst16, src16
   47                     ; dst16 := [dst16] + [src16]
   48                     
   49                     ; add16 dst16, #val16
   50                     ; dst16 := [dst16] + val16
   51                     add16   .macro
   52                             clc
   53                             .if \?2 = ARG_IMMED
   54                             lda \1
   55                             adc #low(\2)
   56                             sta \1
   57                             lda \1+1
   58                             adc #high(\2)
   59                             sta \1+1
   60                             .else
   61                             lda \1
   62                             adc \2
   63                             sta \1
   64                             lda \1+1
   65                             adc \2+1
   66                             sta \1+1
   67                             .endif
   68                             .endm
   69                     
   70                     ; inc16 dst16
   71                     ; dst16 := [dst16] + 1
   72                     inc16   .macro
   73                             add16 \1, #1
   74                             .endm
   75                     
   76                     ; asr16
   77                     asl16   .macro
   78                             asl \1+1
   79                             rol \1
   80                             .endm
   81                     
   82                     ;; converts pascal style strings to C style
   83                     ;; src, dst, size
   84                     strcpyp2c       .macro
   85                             ldy     #0
   86                             ldx     \3
   87                             beq     .endloop\@
   88                     .loop\@:
   89                             mov     [\1], Y, \2, Y
   90                             iny
   91                             dex
   92                             bne     .loop\@
   93                     .endloop\@:
   94                             mov     #0, \2, Y
   95                             .endm
   96                     
   97           0001      debug .equ 1
   98                     debug_p .macro
   99                             .if     debug
  100                             stx     debug_tmp
  101                             sta     debug_tmp_2
  102                             ldx     #0
  103                     .start\@:
  104                             lda     \1, X
  105                             beq     .done\@
  106                             sta     debug_str
  107                             inx
  108                             jmp     .start\@
  109                     .done\@:
  110                             lda     #$0a
  111                             sta     debug_str
  112                             ldx     debug_tmp
  113                             lda     debug_tmp_2
  114                             .endif
  115                             .endm
  116                     
  117                     
  118                     ; some ppu stuff
  119           3F00      bgpal   .equ $3f00
  120           2020      bgnam   .equ $2020
  121                     
  122                     ppua    .macro
  123                             .if \?1 = ARG_IMMED
  124                             mov #high(\1), $2006
  125                             mov #low(\1), $2006
  126                             .else
  127                             mov \1+1, $2006
  128                             mov \1, $2006
  129                             .endif
  130                             .endm
  131                     
  132                     ppuw    .macro
  133                             mov \1, $2007
  134                             .endm
  135                     
  136                     
  137                     
#[1]   escape.asm
#[2]   tiles.mac
    5                             .include "tiles.mac"
    1                     ;;; macro to set a tile  (tile, pos, off)
    2                             .macro  set_tile
    3                             mov     \3, tile_offset
    4                             mov     \2, tile_pos
    5                             mov16   \1, tile
    6                             jsr     draw_tile
    7                             .endm
#[1]   escape.asm
    6                                     
    7                     ;;; items
    8                             .inesprg 2
    9                             .ineschr 1
   10                             .inesmir 3
   11                             .inesmap 4
   12                     
   13                     
   14           0000              .zp
   15  --:0000            debug_str:      .ds 1
   16  --:0001            debug_num:      .ds 1
   17  --:0002            debug_tmp:      .ds 1
   18  --:0003            debug_tmp_2:    .ds 1
   19                     
   20                             
   21  --:0004            tile_pos: .ds   1
   22  --:0005            tile:   .ds     2
   23  --:0007            tiles:  .ds     180
   24                     
   25  --:00BB            level_num:      .ds     1
   26                             
   27  --:00BC            gx:     .ds     1
   28  --:00BD            gy:     .ds     1
   29  --:00BE            gd:     .ds     1
   30                     
   31  --:00BF            idx16:  .ds     2
   32  --:00C1            tmp:    .ds     1
   33  --:00C2            tmp_2:  .ds     1
   34  --:00C3            tmp_3:  .ds     1
   35  --:00C4            tmp_4:  .ds     1
   36  --:00C5            tmp_5:  .ds     1
   37  --:00C6            tmp16:  .ds     2
   38  --:00C8            tmp16_2: .ds    2
   39  --:00CA            tmp_size: .ds   2
   40  --:00CC            tmp_addr: .ds   2
   41                     
   42  --:00CE            x_scroll: .ds   1
   43                             
   44  --:00CF            level_addr:     .ds     3
   45                     
   46  --:00D2            sprite_dma_ok:  .ds     1               
   47                                     
   48           0200              .bss
   49                     
   50  --:0200            sprite: .ds     256
   51  --:0300            otiles: .ds     180
   52  --:03B4            dests:  .ds     180
   53  --:0468            flags:  .ds     180
   54  --:051C            title:  .ds     36
   55  --:0540            author: .ds     20
   56                                     
   57                     
   58                             
   59                     ;;; initialize
   60           E000              .code
   61           0000              .bank   0
   62           8000              .org    $8000
   63                                     
#[2]   rle.asm
   64                             .include "rle.asm"                      
    1  00:8000            rledecode:
    2           00C1      run     .equ tmp
    3           00C2      size    .equ tmp_2
    4           00C3      bytes   .equ tmp_3
    5           00C4      char    .equ tmp_4
    6                     
    7  00:0000                    debug_p ds1
    8                     ;       debug_p ds_tmpaddr
    9  00:801F  AD CC 00          lda     tmp_addr
   10                     ;       sta     debug_num
   11  00:8022  AD CD 00          lda     tmp_addr+1
   12                     ;       sta     debug_num
   13                             ;; take idx16, read from it and advance it, and store
   14                             ;; result in place pointed by tmp_addr
   15  00:0025                    mov     #180, size      ; size of map
   16  00:802A  A2 00             ldx     #0
   17  00:802C  A0 00             ldy     #0
   18  00:002E                    mov     [idx16], Y, bytes
   19                     
   20  00:0033                    inc16   idx16
   21                     
   22  00:8044            .loop:  
   23                             ;; read a byte to determine run
   24  00:0044                    mov     [idx16], Y, run
   25  00:0049                    inc16   idx16
   26  00:805A  AD C1 00          lda     run
   27  00:805D  D0 03             bne     .run
   28  00:805F  4C 9F 80          jmp     .anti_run       ; if 0, anti-run
   29  00:8062            .run:   
   30                             ;; run
   31                     ;       debug_p ds_run
   32  00:0062                    mov     #0, char        ; set char to 0
   33  00:8067  AD C3 00          lda     bytes           ; check if bytes == 0
   34  00:806A  F0 16             beq     .in_run_loop    ; skip and write zeros if bytes == 0
   35                     
   36  00:006C                    mov     [idx16], Y, char ; read a char, since bytes != 0
   37  00:0071                    inc16   idx16
   38  00:8082            .in_run_loop:
   39                     ;       debug_p ds_x
   40                     ;       stx     debug_num
   41  00:8082  8A                txa
   42  00:8083  A8                tay
   43  00:0084                    mov     char, [tmp_addr], Y ; write the content of the run
   44  00:8089  A0 00             ldy     #0
   45  00:808B  E8                inx
   46  00:808C  CE C2 00          dec     size
   47  00:808F  CE C1 00          dec     run
   48  00:8092  D0 EE             bne     .in_run_loop
   49                     
   50                             ;; done?
   51  00:8094  AD C2 00          lda     size
   52  00:8097  D0 03             bne     .loop_trampoline
   53  00:8099  4C E5 80          jmp     .done
   54  00:809C            .loop_trampoline:
   55  00:809C  4C 44 80          jmp     .loop
   56                             
   57  00:809F            .anti_run:
   58                     ;       debug_p ds_antirun
   59  00:009F                    mov     [idx16], Y, run ; length of this anti-run
   60  00:00A4                    inc16   idx16
   61  00:80B5            .in_anti_run_loop:
   62  00:80B5  B1 BF             lda     [idx16], Y
   63                     ;       sta     debug_num
   64  00:80B7  8D C4 00          sta     char
   65  00:80BA  8A                txa
   66  00:80BB  A8                tay
   67  00:80BC  AD C4 00          lda     char
   68  00:80BF  91 CC             sta     [tmp_addr], Y ; write the content of the run
   69  00:80C1  A0 00             ldy     #0
   70                                             
   71  00:00C3                    inc16   idx16
   72  00:80D4  E8                inx
   73  00:80D5  CE C2 00          dec     size
   74  00:80D8  CE C1 00          dec     run
   75  00:80DB  D0 D8             bne     .in_anti_run_loop
   76                     
   77                             ;; done?
   78  00:80DD  AD C2 00          lda     size
   79  00:80E0  F0 03             beq     .done
   80  00:80E2  4C 44 80          jmp     .loop
   81                             
   82                             
   83  00:80E5            .done:          
   84  00:80E5  60                rts
#[1]   escape.asm
#[2]   joystick.asm
   65                             .include "joystick.asm" 
    1  00:80E6            handle_joy:
    2                             ;; joystick
    3  00:80E6  A9 01             lda     #1
    4  00:80E8  8D 16 40          sta     $4016
    5  00:80EB  A9 00             lda     #0
    6  00:80ED  8D 16 40          sta     $4016
    7                     
    8  00:80F0  AD 16 40          lda     $4016
    9  00:80F3  AD 16 40          lda     $4016
   10  00:80F6  AD 16 40          lda     $4016
   11                             
   12  00:80F9  AD 16 40          lda     $4016
   13  00:80FC  29 01             and     #%00000001      ; start
   14  00:80FE  F0 13             beq     .j_up
   15  00:8100  EE BB 00          inc     level_num
   16  00:8103  AD BB 00          lda     level_num
   17  00:8106  C9 0C             cmp     #12
   18  00:8108  D0 05             bne     .continue
   19  00:810A  A9 00             lda     #0
   20  00:810C  8D BB 00          sta     level_num
   21                             
   22  00:810F            .continue
   23  00:810F  20 DB C0          jsr     choose_level
   24  00:8112  60                rts
   25                             
   26  00:8113            .j_up:  
   27  00:8113  AD 16 40          lda     $4016
   28  00:8116  29 01             and     #%00000001
   29  00:8118  F0 08             beq     .j_down         ; up
   30  00:011A                    mov     #dir_up, gd
   31  00:811F  20 50 81          jsr     draw_guy
   32                     
   33  00:8122            .j_down:
   34  00:8122  AD 16 40          lda     $4016
   35  00:8125  29 01             and     #%00000001
   36  00:8127  F0 08             beq     .j_left         ; down
   37  00:0129                    mov     #dir_down, gd
   38  00:812E  20 50 81          jsr     draw_guy
   39                     
   40  00:8131            .j_left:
   41  00:8131  AD 16 40          lda     $4016
   42  00:8134  29 01             and     #%00000001
   43  00:8136  F0 08             beq     .j_right
   44  00:0138                    mov     #dir_left, gd
   45  00:813D  20 50 81          jsr     draw_guy
   46                     
   47                                                     ; left
   48  00:8140            .j_right:
   49  00:8140  AD 16 40          lda     $4016
   50  00:8143  29 01             and     #%00000001
   51  00:8145  F0 08             beq     .done
   52  00:0147                    mov     #dir_right, gd
   53  00:814C  20 50 81          jsr     draw_guy
   54                                                     ; right
   55  00:814F            .done:  
   56  00:814F  60                rts
   57                     
#[1]   escape.asm
#[2]   guy.asm
   66                             .include "guy.asm"      
    1  00:8150            draw_guy:
    2                             ; debug_p       ds_draw_guy
    3  00:0150                    mov     #0,sprite_dma_ok
    4  00:8155  AD BC 00          lda     gx
    5  00:8158  0A                asl     a
    6  00:8159  0A                asl     a
    7  00:815A  0A                asl     a
    8  00:815B  0A                asl     a
    9  00:815C  38                sec
   10  00:815D  ED CE 00          sbc     x_scroll
   11  00:8160  AA                tax
   12                             
   13  00:8161  AD BD 00          lda     gy
   14  00:8164  0A                asl     a
   15  00:8165  0A                asl     a
   16  00:8166  0A                asl     a
   17  00:8167  0A                asl     a
   18  00:8168  18                clc
   19  00:8169  69 2F             adc     #$2F
   20  00:816B  A8                tay     
   21                     
   22  00:816C  AD BE 00          lda     gd
   23                     ;       sta     debug_num
   24  00:816F  C9 01             cmp     #dir_up
   25  00:8171  F0 15             beq     .up
   26                     
   27  00:8173            .compare2:      
   28  00:8173  C9 02             cmp     #dir_down
   29  00:8175  F0 0B             beq     .down_trampoline
   30  00:8177  C9 04             cmp     #dir_right
   31  00:8179  F0 0A             beq     .right_trampoline
   32  00:817B  C9 03             cmp     #dir_left
   33  00:817D  F0 00             beq     .left_trampoline
   34                     
   35  00:817F            .left_trampoline:
   36  00:817F  4C 36 82          jmp     .left   
   37  00:8182            .down_trampoline:
   38  00:8182  4C DF 81          jmp     .down
   39  00:8185            .right_trampoline:
   40  00:8185  4C 8D 82          jmp     .right
   41                     
   42  00:8188            .up:
   43  00:8188  8C 00 02          sty     sprite
   44  00:818B  AD 02 C8          lda     guy_u_tile
   45  00:818E  8D 01 02          sta     sprite+1
   46  00:8191  A9 00             lda     #0
   47  00:8193  8D 02 02          sta     sprite+2
   48  00:8196  8E 03 02          stx     sprite+3
   49                     
   50  00:8199  8C 04 02          sty     sprite+4
   51  00:819C  AD 03 C8          lda     guy_u_tile+1
   52  00:819F  8D 05 02          sta     sprite+5
   53  00:81A2  A9 00             lda     #0
   54  00:81A4  8D 06 02          sta     sprite+6
   55  00:81A7  8A                txa
   56  00:81A8  18                clc
   57  00:81A9  69 08             adc     #$8
   58  00:81AB  8D 07 02          sta     sprite+7
   59                     
   60  00:81AE  98                tya
   61  00:81AF  18                clc
   62  00:81B0  69 08             adc     #$8
   63  00:81B2  8D 08 02          sta     sprite+8
   64  00:81B5  AD 04 C8          lda     guy_u_tile+2
   65  00:81B8  8D 09 02          sta     sprite+9
   66  00:81BB  A9 00             lda     #0
   67  00:81BD  8D 0A 02          sta     sprite+10
   68  00:81C0  8E 0B 02          stx     sprite+11
   69                     
   70  00:81C3  98                tya
   71  00:81C4  18                clc
   72  00:81C5  69 08             adc     #$8
   73  00:81C7  8D 0C 02          sta     sprite+12
   74  00:81CA  AD 05 C8          lda     guy_u_tile+3
   75  00:81CD  8D 0D 02          sta     sprite+13
   76  00:81D0  A9 00             lda     #0
   77  00:81D2  8D 0E 02          sta     sprite+14
   78  00:81D5  8A                txa
   79  00:81D6  18                clc
   80  00:81D7  69 08             adc     #$8
   81  00:81D9  8D 0F 02          sta     sprite+15
   82                     
   83  00:81DC  4C E4 82          jmp     .done
   84  00:81DF            .down:  
   85  00:81DF  8C 00 02          sty     sprite
   86  00:81E2  AD 06 C8          lda     guy_d_tile
   87  00:81E5  8D 01 02          sta     sprite+1
   88  00:81E8  A9 00             lda     #0
   89  00:81EA  8D 02 02          sta     sprite+2
   90  00:81ED  8E 03 02          stx     sprite+3
   91                     
   92  00:81F0  8C 04 02          sty     sprite+4
   93  00:81F3  AD 07 C8          lda     guy_d_tile+1
   94  00:81F6  8D 05 02          sta     sprite+5
   95  00:81F9  A9 00             lda     #0
   96  00:81FB  8D 06 02          sta     sprite+6
   97  00:81FE  8A                txa
   98  00:81FF  18                clc
   99  00:8200  69 08             adc     #$8
  100  00:8202  8D 07 02          sta     sprite+7
  101                     
  102  00:8205  98                tya
  103  00:8206  18                clc
  104  00:8207  69 08             adc     #$8
  105  00:8209  8D 08 02          sta     sprite+8
  106  00:820C  AD 08 C8          lda     guy_d_tile+2
  107  00:820F  8D 09 02          sta     sprite+9
  108  00:8212  A9 00             lda     #0
  109  00:8214  8D 0A 02          sta     sprite+10
  110  00:8217  8E 0B 02          stx     sprite+11
  111                     
  112  00:821A  98                tya
  113  00:821B  18                clc
  114  00:821C  69 08             adc     #$8
  115  00:821E  8D 0C 02          sta     sprite+12
  116  00:8221  AD 09 C8          lda     guy_d_tile+3
  117  00:8224  8D 0D 02          sta     sprite+13
  118  00:8227  A9 00             lda     #0
  119  00:8229  8D 0E 02          sta     sprite+14
  120  00:822C  8A                txa
  121  00:822D  18                clc
  122  00:822E  69 08             adc     #$8
  123  00:8230  8D 0F 02          sta     sprite+15
  124                     
  125  00:8233  4C E4 82          jmp     .done
  126                     
  127  00:8236            .left:  
  128  00:8236  8C 00 02          sty     sprite
  129  00:8239  AD 0A C8          lda     guy_l_tile
  130  00:823C  8D 01 02          sta     sprite+1
  131  00:823F  A9 00             lda     #0
  132  00:8241  8D 02 02          sta     sprite+2
  133  00:8244  8E 03 02          stx     sprite+3
  134                     
  135  00:8247  8C 04 02          sty     sprite+4
  136  00:824A  AD 0B C8          lda     guy_l_tile+1
  137  00:824D  8D 05 02          sta     sprite+5
  138  00:8250  A9 00             lda     #0
  139  00:8252  8D 06 02          sta     sprite+6
  140  00:8255  8A                txa
  141  00:8256  18                clc
  142  00:8257  69 08             adc     #$8
  143  00:8259  8D 07 02          sta     sprite+7
  144                     
  145  00:825C  98                tya
  146  00:825D  18                clc
  147  00:825E  69 08             adc     #$8
  148  00:8260  8D 08 02          sta     sprite+8
  149  00:8263  AD 0C C8          lda     guy_l_tile+2
  150  00:8266  8D 09 02          sta     sprite+9
  151  00:8269  A9 00             lda     #0
  152  00:826B  8D 0A 02          sta     sprite+10
  153  00:826E  8E 0B 02          stx     sprite+11
  154                     
  155  00:8271  98                tya
  156  00:8272  18                clc
  157  00:8273  69 08             adc     #$8
  158  00:8275  8D 0C 02          sta     sprite+12
  159  00:8278  AD 0D C8          lda     guy_l_tile+3
  160  00:827B  8D 0D 02          sta     sprite+13
  161  00:827E  A9 00             lda     #0
  162  00:8280  8D 0E 02          sta     sprite+14
  163  00:8283  8A                txa
  164  00:8284  18                clc
  165  00:8285  69 08             adc     #$8
  166  00:8287  8D 0F 02          sta     sprite+15
  167                     
  168  00:828A  4C E4 82          jmp     .done
  169                             
  170  00:828D            .right:
  171  00:828D  8C 00 02          sty     sprite
  172  00:8290  AD 0B C8          lda     guy_l_tile+1
  173  00:8293  8D 01 02          sta     sprite+1
  174  00:8296  A9 40             lda     #%01000000
  175  00:8298  8D 02 02          sta     sprite+2
  176  00:829B  8E 03 02          stx     sprite+3
  177                     
  178  00:829E  8C 04 02          sty     sprite+4
  179  00:82A1  AD 0A C8          lda     guy_l_tile
  180  00:82A4  8D 05 02          sta     sprite+5
  181  00:82A7  A9 40             lda     #%01000000
  182  00:82A9  8D 06 02          sta     sprite+6
  183  00:82AC  8A                txa
  184  00:82AD  18                clc
  185  00:82AE  69 08             adc     #$8
  186  00:82B0  8D 07 02          sta     sprite+7
  187                     
  188  00:82B3  98                tya
  189  00:82B4  18                clc
  190  00:82B5  69 08             adc     #$8
  191  00:82B7  8D 08 02          sta     sprite+8
  192  00:82BA  AD 0D C8          lda     guy_l_tile+3
  193  00:82BD  8D 09 02          sta     sprite+9
  194  00:82C0  A9 40             lda     #%01000000
  195  00:82C2  8D 0A 02          sta     sprite+10
  196  00:82C5  8E 0B 02          stx     sprite+11
  197                     
  198  00:82C8  98                tya
  199  00:82C9  18                clc
  200  00:82CA  69 08             adc     #$8
  201  00:82CC  8D 0C 02          sta     sprite+12
  202  00:82CF  AD 0C C8          lda     guy_l_tile+2
  203  00:82D2  8D 0D 02          sta     sprite+13
  204  00:82D5  A9 40             lda     #%01000000
  205  00:82D7  8D 0E 02          sta     sprite+14
  206  00:82DA  8A                txa
  207  00:82DB  18                clc
  208  00:82DC  69 08             adc     #$8
  209  00:82DE  8D 0F 02          sta     sprite+15
  210                     
  211  00:82E1  4C E4 82          jmp     .done
  212                     
  213  00:82E4            .done:
  214  00:02E4                    mov #1,sprite_dma_ok
  215  00:82E9  60                rts
  216                     
#[1]   escape.asm
#[2]   load-draw-level.asm
   67                             .include "load-draw-level.asm"
    1  00:82EA            load_level:
    2  00:02EA                    debug_p ds_load_level
    3  00:0309                    mov     #0, tmp_size+1
    4  00:030E                    mov     #dir_right, gd
    5  00:0313                    mov     #0, x_scroll
    6                                             
    7  00:0318                    mov16   level_addr, idx16
    8  00:8324  A0 00             ldy     #0
    9  00:0326                    mov     [idx16], Y, debug_str
   10  00:832B  C8                iny
   11  00:032C                    mov     [idx16], Y, debug_str
   12  00:8331  C8                iny
   13  00:0332                    mov     [idx16], Y, debug_str
   14  00:8337  C8                iny
   15  00:0338                    mov     [idx16], Y, debug_str
   16  00:033D                    mov     #0, debug_str
   17  00:8342  A0 0F             ldy     #15             ; ESXL + width + height + MSB of size of title
   18  00:0344                    mov     [idx16], Y, tmp_size    ; size of title string
   19  00:8349  8D 01 00          sta     debug_num
   20  00:034C                    add16   idx16, #16              ; move to start of title
   21                     
   22                             ;; copy the title string
   23  00:035D                    strcpyp2c       idx16, title, tmp_size
   24                     
   25  00:0372                    add16   idx16, tmp_size ; move past the title string
   26  00:8385  A0 03             ldy     #3              ; MSB of size of author
   27  00:0387                    mov     [idx16], Y, tmp_size ; size of author string
   28  00:038C                    add16   idx16, #4       ; move to start of author
   29                     
   30                             ;; copy the author string
   31  00:039D                    strcpyp2c       idx16, author, tmp_size
   32                     
   33  00:03B2                    add16   idx16, tmp_size ; move past the author string
   34                     
   35  00:83C5  A0 03             ldy     #3              ; MSB of guy x
   36  00:03C7                    mov     [idx16], Y, gx
   37  00:03CC                    add16   idx16, #4
   38  00:83DD  A0 03             ldy     #3              ; MSB of guy y
   39  00:03DF                    mov     [idx16], Y, gy
   40  00:03E4                    add16   idx16, #4
   41                     
   42                                     
   43                             ;; start rledecoding
   44  00:03F5                    mov16   #tiles, tmp_addr
   45  00:83FF  20 00 80          jsr     rledecode
   46                     
   47                     
   48  00:0402                    debug_p ds_tiles
   49                     ;       mov     #tiles, debug_num
   50                     ;       mov     (#tiles)+1, debug_num
   51  00:8421  A2 00             ldx     #0
   52  00:8423  A0 00             ldy     #0
   53  00:8425            .tile_print:    
   54  00:8425  BD 07 00          lda     tiles, X
   55  00:8428  69 20             adc     #32
   56  00:842A  8D 00 00          sta     debug_str
   57  00:842D  C8                iny
   58  00:842E  98                tya
   59  00:842F  C9 12             cmp     #18
   60  00:8431  D0 07             bne     .no_newline
   61  00:0433                    mov     #10, debug_str
   62  00:8438  A0 00             ldy     #0
   63  00:843A            .no_newline:
   64  00:843A  E8                inx
   65  00:843B  8A                txa
   66  00:843C  C9 B4             cmp     #180
   67  00:843E  D0 E5             bne     .tile_print
   68  00:0440                    mov     #0, debug_str
   69                             
   70  00:0445                    mov16   #otiles, tmp_addr
   71  00:844F  20 00 80          jsr     rledecode
   72  00:0452                    mov16   #dests, tmp_addr
   73  00:845C  20 00 80          jsr     rledecode
   74  00:045F                    mov16   #flags, tmp_addr
   75  00:8469  20 00 80          jsr     rledecode
   76                     
   77  00:846C  60                rts
   78                                     
   79                             
   80  00:846D            draw_level:
   81  00:846D  20 28 86          jsr     ppu_off
   82  00:0470                    debug_p ds_draw_level
   83                             ;; assumes load_level just called
   84                                     
   85  00:048F                    mov     #0, tile_pos
   86  00:8494  AD 04 00  .loop:  lda     tile_pos
   87  00:8497  C9 B4             cmp     #180
   88  00:8499  F0 20             beq     .done
   89  00:849B  89 04             bit     #%00000100
   90  00:849D  D0 00             bne     .continue
   91  00:849F            .continue:      
   92  00:849F  AE 04 00          ldx     tile_pos
   93                     
   94                             ;; get the tile
   95  00:84A2  BD 07 00          lda     tiles, X
   96  00:84A5  AA                tax
   97  00:84A6  BD 10 C8          lda     tile_name_table, X
   98  00:84A9  8D 05 00          sta     tile
   99  00:84AC  BD 43 C8          lda     tile_attr_table, X
  100  00:84AF  8D 06 00          sta     tile+1  
  101                     
  102  00:84B2  20 BF 84          jsr     draw_tile
  103  00:84B5  EE 04 00          inc     tile_pos
  104  00:84B8  4C 94 84          jmp     .loop
  105                     
  106  00:84BB  20 F8 85  .done:  jsr     ppu_on          
  107  00:84BE  60                rts
  108                     
  109                     
  110  00:84BF            draw_tile:
  111           00C6      screen_pos .equ tmp16
  112  00:84BF  AE 04 00          ldx     tile_pos
  113  00:04C2                    mov     tile_pos_table_2, X, screen_pos+1
  114  00:04C8                    mov     tile_pos_table_1, X, screen_pos
  115                     
  116  00:04CE                    add16   screen_pos, #$20C0
  117                     
  118  00:84DF  AD C6 00          lda     screen_pos
  119  00:84E2  0A                asl     a
  120  00:84E3  AD C7 00          lda     screen_pos+1
  121  00:84E6  2A                rol     a
  122  00:84E7  29 07             and     #%00000111
  123  00:84E9  0A                asl     a
  124  00:84EA  0A                asl     a
  125  00:84EB  0A                asl     a
  126  00:84EC  8D C9 00          sta     tmp16_2+1
  127  00:84EF  AD C6 00          lda     screen_pos
  128  00:84F2  29 1C             and     #%00011100
  129  00:84F4  4A                lsr     a
  130  00:84F5  4A                lsr     a
  131  00:84F6  0D C9 00          ora     tmp16_2+1
  132  00:84F9  69 C0             adc     #$C0    
  133                     
  134  00:84FB  8D C1 00          sta     tmp
  135  00:84FE  AD C7 00          lda     screen_pos+1
  136  00:8501  29 FC             and     #%11111100
  137  00:8503  18                clc
  138  00:8504  69 03             adc     #$3     
  139  00:8506  8D 06 20          sta     $2006           ; set address of thing
  140  00:8509  A8                tay
  141  00:850A  AD C1 00          lda     tmp
  142  00:850D  8D 06 20          sta     $2006   
  143  00:8510  AE 07 20          ldx     $2007           ; invalid data
  144  00:8513  AE 07 20          ldx     $2007           ; correct data
  145  00:8516  8C 06 20          sty     $2006           ; reset address
  146  00:8519  8D 06 20          sta     $2006
  147                     
  148  00:851C  AD C6 00          lda     screen_pos      ; find the bit
  149  00:851F  29 42             and     #%01000010
  150  00:8521  D0 12             bne     .test1
  151  00:8523  AD 06 00          lda     tile+1
  152  00:8526  29 03             and     #%00000011
  153  00:8528  8D C1 00          sta     tmp
  154  00:852B  8A                txa
  155  00:852C  0D C1 00          ora     tmp
  156  00:852F  8D 07 20          sta     $2007           ; set the color
  157  00:8532  4C 70 85          jmp     .update_tile
  158                     
  159  00:8535  C9 02     .test1: cmp     #%00000010
  160  00:8537  D0 12             bne     .test2
  161  00:8539  AD 06 00          lda     tile+1
  162  00:853C  29 0C             and     #%00001100
  163  00:853E  8D C1 00          sta     tmp
  164  00:8541  8A                txa
  165  00:8542  0D C1 00          ora     tmp
  166  00:8545  8D 07 20          sta     $2007
  167  00:8548  4C 70 85          jmp     .update_tile
  168                     
  169  00:854B  C9 40     .test2: cmp     #%01000000
  170  00:854D  D0 12             bne     .test3
  171  00:854F  AD 06 00          lda     tile+1
  172  00:8552  29 30             and     #%00110000
  173  00:8554  8D C1 00          sta     tmp
  174  00:8557  8A                txa
  175  00:8558  0D C1 00          ora     tmp
  176  00:855B  8D 07 20          sta     $2007
  177  00:855E  4C 70 85          jmp     .update_tile
  178                     
  179  00:8561  AD 06 00  .test3: lda     tile+1
  180  00:8564  29 C0             and     #%11000000
  181  00:8566  8D C1 00          sta     tmp
  182  00:8569  8A                txa
  183  00:856A  0D C1 00          ora     tmp
  184  00:856D  8D 07 20          sta     $2007
  185                             
  186                     
  187  00:8570            .update_tile:                                           
  188  00:8570  AD C7 00          lda     tmp16+1
  189  00:8573  8D 06 20          sta     $2006
  190  00:8576  AD C6 00          lda     tmp16
  191  00:8579  8D 06 20          sta     $2006
  192  00:857C  AD 05 00          lda     tile
  193  00:857F  8D 07 20          sta     $2007           ; update the tile
  194                     
  195  00:0582                    add16   tmp16, #1       ; next part (right)
  196  00:8593  AD C7 00          lda     tmp16+1
  197  00:8596  8D 06 20          sta     $2006
  198  00:8599  AD C6 00          lda     tmp16
  199  00:859C  8D 06 20          sta     $2006
  200  00:859F  EE 05 00          inc     tile
  201  00:85A2  AD 05 00          lda     tile
  202  00:85A5  8D 07 20          sta     $2007           ; update the tile
  203                     
  204  00:05A8                    add16   tmp16, #$20     ; next part (down)
  205  00:85B9  AD C7 00          lda     tmp16+1
  206  00:85BC  8D 06 20          sta     $2006
  207  00:85BF  AD C6 00          lda     tmp16
  208  00:85C2  8D 06 20          sta     $2006
  209  00:85C5  AD 05 00          lda     tile
  210  00:85C8  18                clc
  211  00:85C9  69 10             adc     #$10
  212  00:85CB  8D 05 00          sta     tile
  213  00:85CE  8D 07 20          sta     $2007           ; update the tile
  214                     
  215  00:05D1                    add16   tmp16, #$FFFF   ; last part (left)
  216  00:85E2  AD C7 00          lda     tmp16+1
  217  00:85E5  8D 06 20          sta     $2006
  218  00:85E8  AD C6 00          lda     tmp16
  219  00:85EB  8D 06 20          sta     $2006
  220  00:85EE  CE 05 00          dec     tile
  221  00:85F1  AD 05 00          lda     tile
  222  00:85F4  8D 07 20          sta     $2007           ; update the tile
  223                     
  224  00:85F7  60                rts
  225                     
#[1]   escape.asm
#[2]   ppu.asm
   68                             .include "ppu.asm"      
    1  00:85F8            ppu_on:
    2  00:05F8                    debug_p ds_ppu_on
    3  00:8617  20 CC C1          jsr     vwait
    4  00:861A  A9 80             lda     #%10000000
    5  00:861C  8D 00 20          sta     $2000   
    6  00:861F  20 CC C1          jsr     vwait
    7  00:8622  A9 1E             lda     #%00011110
    8  00:8624  8D 01 20          sta     $2001
    9                     
   10  00:8627  60                rts
   11                     
   12  00:8628            ppu_off:
   13  00:0628                    debug_p ds_ppu_off
   14  00:8647  20 CC C1          jsr     vwait
   15  00:864A  A9 00             lda     #0
   16  00:864C  8D 00 20          sta     $2000
   17  00:864F  8D 01 20          sta     $2001
   18                     
   19  00:8652  60                rts
#[1]   escape.asm
   69                     
   70           0001              .bank   1
   71           A000              .org    $A000
   72                     
   73                                     
   74           0002              .bank   2
   75           C000              .org    $C000
   76                                     
#[2]   interrupts.asm
   77                             .include "interrupts.asm"
    1  02:C000  78        intr:   sei
    2  02:C001  40                rti
    3                     
    4  02:C002            nmi:    
    5  02:C002  48                pha
    6  02:C003  A9 00             lda     #0
    7  02:C005  8D 06 20          sta     $2006
    8  02:C008  8D 06 20          sta     $2006
    9  02:C00B  AD CE 00          lda     x_scroll
   10  02:C00E  8D 05 20          sta     $2005
   11  02:C011  A9 00             lda     #0
   12  02:C013  8D 05 20          sta     $2005
   13                     
   14  02:C016  AD D2 00          lda     sprite_dma_ok   ; it's not always right to do DMA
   15  02:C019  F0 05             beq     .no_dma
   16                     
   17  02:C01B  A9 02             lda     #sprite/$100    ; sprite
   18  02:C01D  8D 14 40          sta     $4014
   19                     
   20  02:C020            .no_dma:
   21  02:C020            .done:  
   22                             
   23  02:C020  68                pla
   24  02:C021  40                rti
#[1]   escape.asm
   78                     
   79                                     
   80  02:C022  78        start:  sei
   81                     
   82  02:C023  20 CC C1          jsr     vwait   
   83  02:C026  20 28 86          jsr     ppu_off
   84  02:C029  20 D2 C1          jsr     init_sprite_memory
   85                             
   86  02:802C                    debug_p ds_begin
   87                             
   88  02:C04B  20 CC C1          jsr     vwait   
   89  02:C04E  20 CC C1          jsr     vwait
   90                     
   91                             
   92                     
   93                     ;;; draw item
   94                     
   95  02:C051  A9 3F             lda     #$3f
   96  02:C053  8D 06 20          sta     $2006
   97  02:C056  A9 00             lda     #$00
   98  02:C058  8D 06 20          sta     $2006
   99  02:C05B  8D 05 20          sta     $2005
  100  02:C05E  8D 05 20          sta     $2005
  101                     
#[2]   palettes.asm
  102                             .include "palettes.asm" 
    1                     ;;; palette 0
    2  02:C061  A9 0E             lda     #$0e            ; black
    3  02:C063  8D 07 20          sta     $2007
    4  02:C066  A9 2D             lda     #$2d            ; 50gray
    5  02:C068  8D 07 20          sta     $2007
    6  02:C06B  A9 3D             lda     #$3d            ; 25gray
    7  02:C06D  8D 07 20          sta     $2007
    8  02:C070  A9 38             lda     #$38            ; orange
    9  02:C072  8D 07 20          sta     $2007
   10                     
   11                     ;;; palette 1
   12  02:C075  A9 0E             lda     #$0e
   13  02:C077  8D 07 20          sta     $2007
   14  02:C07A  A9 16             lda     #$16            ; red
   15  02:C07C  8D 07 20          sta     $2007
   16  02:C07F  A9 3D             lda     #$3d            ; gray
   17  02:C081  8D 07 20          sta     $2007
   18  02:C084  A9 28             lda     #$28            ; yellow
   19  02:C086  8D 07 20          sta     $2007
   20                             
   21                             
   22                     ;;; palette 2
   23  02:C089  A9 0E             lda     #$0e            ; black
   24  02:C08B  8D 07 20          sta     $2007
   25  02:C08E  A9 12             lda     #$12            ; blue
   26  02:C090  8D 07 20          sta     $2007
   27  02:C093  A9 3D             lda     #$3D            ; gray
   28  02:C095  8D 07 20          sta     $2007
   29  02:C098  A9 17             lda     #$17            ; brownish
   30  02:C09A  8D 07 20          sta     $2007
   31                             
   32                             
   33                     ;;; palette 3
   34  02:C09D  A9 0E             lda     #$0e            ; black
   35  02:C09F  8D 07 20          sta     $2007
   36  02:C0A2  A9 19             lda     #$19            ; green
   37  02:C0A4  8D 07 20          sta     $2007
   38  02:C0A7  A9 3D             lda     #$3d            ; gray
   39  02:C0A9  8D 07 20          sta     $2007
   40  02:C0AC  A9 12             lda     #$12            ; blue
   41  02:C0AE  8D 07 20          sta     $2007
   42                     
   43                             
   44                     ;;; sprite palette 1
   45  02:C0B1  A9 3F             lda     #$3f
   46  02:C0B3  8D 06 20          sta     $2006
   47  02:C0B6  A9 11             lda     #$11
   48  02:C0B8  8D 06 20          sta     $2006
   49  02:C0BB  A9 18             lda     #$18            ; brown
   50  02:C0BD  8D 07 20          sta     $2007
   51  02:C0C0  A9 36             lda     #$36            ; pink
   52  02:C0C2  8D 07 20          sta     $2007
   53  02:C0C5  A9 2C             lda     #$2C            ; blue
   54  02:C0C7  8D 07 20          sta     $2007
#[1]   escape.asm
  103                                     
  104  02:80CA                    mov     #0, level_num
  105  02:C0CF  20 DB C0          jsr     choose_level
  106                             
  107                     ;;; ppu on
  108  02:C0D2  20 F8 85          jsr     ppu_on
  109                             
  110                             
  111  02:C0D5            main_loop:
  112  02:C0D5  20 E6 80          jsr     handle_joy
  113  02:C0D8  4C D5 C0          jmp     main_loop
  114                     
  115                             
  116  02:C0DB            choose_level:
  117  02:C0DB  AD BB 00          lda     level_num
  118  02:C0DE  8D 01 00          sta     debug_num
  119                             
  120  02:C0E1  D0 0D             bne     .l1
  121  02:80E3                    mov16   #sample_level01, level_addr
  122  02:C0ED  4C C2 C1          jmp     .go
  123  02:C0F0  AD BB 00  .l1:    lda     level_num
  124  02:C0F3  C9 01             cmp     #1
  125  02:C0F5  D0 0D             bne     .l2
  126  02:80F7                    mov16   #sample_level02, level_addr
  127  02:C101  4C C2 C1          jmp     .go
  128  02:C104  AD BB 00  .l2:    lda     level_num
  129  02:C107  C9 02             cmp     #2
  130  02:C109  D0 0D             bne     .l3
  131  02:810B                    mov16   #sample_level02, level_addr
  132  02:C115  4C C2 C1          jmp     .go
  133  02:C118  AD BB 00  .l3:    lda     level_num
  134  02:C11B  C9 03             cmp     #3
  135  02:C11D  D0 0D             bne     .l4
  136  02:811F                    mov16   #sample_level03, level_addr
  137  02:C129  4C C2 C1          jmp     .go
  138  02:C12C  AD BB 00  .l4:    lda     level_num
  139  02:C12F  C9 04             cmp     #4
  140  02:C131  D0 0D             bne     .l5
  141  02:8133                    mov16   #sample_level04, level_addr
  142  02:C13D  4C C2 C1          jmp     .go
  143  02:C140  AD BB 00  .l5:    lda     level_num
  144  02:C143  C9 05             cmp     #5
  145  02:C145  D0 0D             bne     .l6
  146  02:8147                    mov16   #sample_level05, level_addr
  147  02:C151  4C C2 C1          jmp     .go
  148  02:C154  AD BB 00  .l6:    lda     level_num
  149  02:C157  C9 06             cmp     #6
  150  02:C159  D0 0D             bne     .l7
  151  02:815B                    mov16   #sample_level06, level_addr
  152  02:C165  4C C2 C1          jmp     .go
  153  02:C168  AD BB 00  .l7:    lda     level_num
  154  02:C16B  C9 07             cmp     #7
  155  02:C16D  D0 0D             bne     .l8
  156  02:816F                    mov16   #sample_level07, level_addr
  157  02:C179  4C C2 C1          jmp     .go
  158  02:C17C  AD BB 00  .l8:    lda     level_num
  159  02:C17F  C9 08             cmp     #8
  160  02:C181  D0 0D             bne     .l9
  161  02:8183                    mov16   #sample_level08, level_addr
  162  02:C18D  4C C2 C1          jmp     .go
  163  02:C190  AD BB 00  .l9:    lda     level_num
  164  02:C193  C9 09             cmp     #9
  165  02:C195  D0 0D             bne     .l10
  166  02:8197                    mov16   #sample_level09, level_addr
  167  02:C1A1  4C C2 C1          jmp     .go
  168  02:C1A4  AD BB 00  .l10:   lda     level_num
  169  02:C1A7  C9 0A             cmp     #10
  170  02:C1A9  D0 0D             bne     .l11
  171  02:81AB                    mov16   #sample_level10, level_addr
  172  02:C1B5  4C C2 C1          jmp     .go
  173  02:81B8            .l11:   mov16   #sample_level11, level_addr
  174                                     
  175  02:C1C2            .go:    
  176  02:C1C2  20 EA 82          jsr     load_level
  177  02:C1C5  20 50 81          jsr     draw_guy
  178  02:C1C8  20 6D 84          jsr     draw_level
  179                     
  180  02:C1CB  60                rts
  181                             
  182                     
  183                             
  184  02:C1CC            vwait:  
  185  02:C1CC  AD 02 20          lda     $2002
  186  02:C1CF  10 FB             bpl     vwait
  187                     
  188  02:C1D1  60                rts
  189                     
  190                     
  191                     
  192  02:C1D2            init_sprite_memory:
  193  02:C1D2  A2 FF             ldx     #$FF
  194  02:C1D4  F0 06     .loop:  beq     .end    
  195  02:81D6                    mov     #$FF, sprite, X
  196  02:C1DB  CA                dex
  197  02:C1DC  60        .end:   rts
  198                     
  199                     
  200                             
  201                                     
  202                     ;;; some data
  203                     ;;; data
  204           E000              .data
  205           0002              .bank   2
  206           C800              .org    $C800
#[2]   tiles.inc
  207                             .include "tiles.inc"
    1                     ;;; tiles, as defined in level.h
    2                             
    3           0000              .rsset $0
    4           0000      T_FLOOR .rs 1
    5           0001      T_RED   .rs 1
    6           0002      T_BLUE  .rs 1
    7           0003      T_GREY  .rs 1
    8           0004      T_GREEN .rs 1
    9           0005      T_EXIT  .rs 1
   10           0006      T_HOLE  .rs 1
   11           0007      T_GOLD  .rs 1
   12           0008      T_LASER .rs 1
   13           0009      T_PANEL .rs 1
   14           000A      T_STOP  .rs 1
   15           000B      T_RIGHT .rs 1
   16           000C      T_LEFT  .rs 1
   17           000D      T_UP    .rs 1
   18           000E      T_DOWN  .rs 1
   19           000F      T_ROUGH .rs 1
   20                     
   21           0010      T_ELECTRIC      .rs 1
   22           0011      T_ON    .rs 1
   23           0012      T_OFF   .rs 1
   24           0013      T_TRANSPORT     .rs 1
   25           0014      T_BROKEN        .rs 1
   26           0015      T_LR    .rs 1
   27           0016      T_UD    .rs 1
   28           0017      T_0     .rs 1
   29           0018      T_1     .rs 1
   30           0019      T_NS    .rs 1
   31           001A      T_NE    .rs 1
   32           001B      T_NW    .rs 1
   33           001C      T_SE    .rs 1
   34           001D      T_SW    .rs 1
   35           001E      T_WE    .rs 1
   36           001F      T_BUTTON        .rs 1
   37                     
   38           0020      T_BLIGHT        .rs 1
   39           0021      T_RLIGHT        .rs 1
   40           0022      T_GLIGHT        .rs 1
   41           0023      T_BLACK .rs 1
   42           0024      T_BUP   .rs 1
   43           0025      T_BDOWN .rs 1
   44           0026      T_RUP   .rs 1
   45           0027      T_RDOWN .rs 1
   46           0028      T_GUP   .rs 1
   47           0029      T_GDOWN .rs 1
   48           002A      T_BSPHERE       .rs 1
   49           002B      T_RSPHERE       .rs 1
   50           002C      T_GSPHERE       .rs 1
   51           002D      T_SPHERE        .rs 1
   52           002E      T_UNUSED_1      .rs 1
   53           002F      T_UNUSED_2      .rs 1
   54                     
   55           0030      T_BPANEL        .rs 1
   56           0031      T_RPANEL        .rs 1
   57           0032      T_GPANEL        .rs 1
   58                     
   59  02:C800            letter_start:
   60  02:C800  A0                .db $A0
   61  02:C801            laser_sprite_byte:
   62  02:C801  04                .db 4
   63                     
   64           0001      dir_up          .equ 1
   65           0002      dir_down        .equ 2
   66           0003      dir_left        .equ 3
   67           0004      dir_right       .equ 4
   68                     
   69  02:C802            guy_u_tile:
   70  02:C802  E0 E1 F0          .db $E0,$E1,$F0,$F1
       02:C805  F1        
   71  02:C806            guy_d_tile:
   72  02:C806  E2 E3 F2          .db $E2,$E3,$F2,$F3
       02:C809  F3        
   73  02:C80A            guy_l_tile:
   74  02:C80A  E4 E5 F4          .db $E4,$E5,$F4,$F5
       02:C80D  F5        
   75  02:C80E            laser_tile:
   76  02:C80E  E6 F6             .db $E6, $F6
   77                     
   78                             
   79  02:C810            tile_name_table:
   80  02:C810  6C 02 02          .db $6C,$02,$02,$02,$02,$04,$06,$6E,$08,$44,$0A,$20,$24,$26,$22,$0C, ...
       02:C813  02 02 04  
       02:C816  06 6E 08  
       02:C819  44 0A 20  
       02:C81C  24 26 22  
       02:C81F  0C 80 28  
       02:C822  2A 0E 46  
       02:C825  2C 2E 40  
       02:C828  42 48 4A  
       02:C82B  4C 4E 60  
       02:C82E  62 64 66  
       02:C831  66 66 00  
       02:C834  68 6C 68  
       02:C837  6C 68 6C  
       02:C83A  6A 6A 6A  
       02:C83D  6A 00 00  
       02:C840  82 82 82  
   84                     
   85  02:C843            tile_attr_table:
   86  02:C843  00 55 AA          .db $00,$55,$AA,$00,$FF,$AA,$00,$00,$55,$00,$55,$00,$00,$00,$00,$00, ...
       02:C846  00 FF AA  
       02:C849  00 00 55  
       02:C84C  00 55 00  
       02:C84F  00 00 00  
       02:C852  00 55 55  
       02:C855  00 00 00  
       02:C858  00 00 00  
       02:C85B  00 00 00  
       02:C85E  00 00 00  
       02:C861  00 00 AA  
       02:C864  55 FF 00  
       02:C867  AA AA 55  
       02:C86A  55 FF FF  
       02:C86D  AA 55 FF  
       02:C870  00 00 00  
       02:C873  AA 55 FF  
   90                     
   91  02:C876            tile_pos_table_1:
   92  02:C876  00 02 04          .db $00,$02,$04,$06,$08,$0A,$0C,$0E,$10,$12,$14,$16,$18,$1A,$1C,$1E, ...
       02:C879  06 08 0A  
       02:C87C  0C 0E 10  
       02:C87F  12 14 16  
       02:C882  18 1A 1C  
       02:C885  1E 00 02  
       02:C888  40 42 44  
       02:C88B  46 48 4A  
       02:C88E  4C 4E 50  
       02:C891  52 54 56  
       02:C894  58 5A 5C  
       02:C897  5E 40 42  
       02:C89A  80 82 84  
       02:C89D  86 88 8A  
       02:C8A0  8C 8E 90  
       02:C8A3  92 94 96  
       02:C8A6  98 9A 9C  
       02:C8A9  9E 80 82  
       02:C8AC  C0 C2 C4  
       02:C8AF  C6 C8 CA  
       02:C8B2  CC CE D0  
       02:C8B5  D2 D4 D6  
       02:C8B8  D8 DA DC  
       02:C8BB  DE C0 C2  
       02:C8BE  00 02 04  
       02:C8C1  06 08 0A  
       02:C8C4  0C 0E 10  
       02:C8C7  12 14 16  
       02:C8CA  18 1A 1C  
       02:C8CD  1E 00 02  
       02:C8D0  40 42 44  
       02:C8D3  46 48 4A  
       02:C8D6  4C 4E 50  
       02:C8D9  52 54 56  
       02:C8DC  58 5A 5C  
       02:C8DF  5E 40 42  
       02:C8E2  80 82 84  
       02:C8E5  86 88 8A  
       02:C8E8  8C 8E 90  
       02:C8EB  92 94 96  
       02:C8EE  98 9A 9C  
       02:C8F1  9E 80 82  
       02:C8F4  C0 C2 C4  
       02:C8F7  C6 C8 CA  
       02:C8FA  CC CE D0  
       02:C8FD  D2 D4 D6  
       02:C900  D8 DA DC  
       02:C903  DE C0 C2  
       02:C906  00 02 04  
       02:C909  06 08 0A  
       02:C90C  0C 0E 10  
       02:C90F  12 14 16  
       02:C912  18 1A 1C  
       02:C915  1E 00 02  
       02:C918  40 42 44  
       02:C91B  46 48 4A  
       02:C91E  4C 4E 50  
       02:C921  52 54 56  
       02:C924  58 5A 5C  
       02:C927  5E 40 42  
  112  02:C92A            tile_pos_table_2:
  113  02:C92A  00 00 00          .db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00, ...
       02:C92D  00 00 00  
       02:C930  00 00 00  
       02:C933  00 00 00  
       02:C936  00 00 00  
       02:C939  00 04 04  
       02:C93C  00 00 00  
       02:C93F  00 00 00  
       02:C942  00 00 00  
       02:C945  00 00 00  
       02:C948  00 00 00  
       02:C94B  00 04 04  
       02:C94E  00 00 00  
       02:C951  00 00 00  
       02:C954  00 00 00  
       02:C957  00 00 00  
       02:C95A  00 00 00  
       02:C95D  00 04 04  
       02:C960  00 00 00  
       02:C963  00 00 00  
       02:C966  00 00 00  
       02:C969  00 00 00  
       02:C96C  00 00 00  
       02:C96F  00 04 04  
       02:C972  01 01 01  
       02:C975  01 01 01  
       02:C978  01 01 01  
       02:C97B  01 01 01  
       02:C97E  01 01 01  
       02:C981  01 05 05  
       02:C984  01 01 01  
       02:C987  01 01 01  
       02:C98A  01 01 01  
       02:C98D  01 01 01  
       02:C990  01 01 01  
       02:C993  01 05 05  
       02:C996  01 01 01  
       02:C999  01 01 01  
       02:C99C  01 01 01  
       02:C99F  01 01 01  
       02:C9A2  01 01 01  
       02:C9A5  01 05 05  
       02:C9A8  01 01 01  
       02:C9AB  01 01 01  
       02:C9AE  01 01 01  
       02:C9B1  01 01 01  
       02:C9B4  01 01 01  
       02:C9B7  01 05 05  
       02:C9BA  02 02 02  
       02:C9BD  02 02 02  
       02:C9C0  02 02 02  
       02:C9C3  02 02 02  
       02:C9C6  02 02 02  
       02:C9C9  02 06 06  
       02:C9CC  02 02 02  
       02:C9CF  02 02 02  
       02:C9D2  02 02 02  
       02:C9D5  02 02 02  
       02:C9D8  02 02 02  
       02:C9DB  02 06 06  
  133                             
#[1]   escape.asm
  208                     
  209                     
  210  02:C9DE            levels: 
  211  02:C9DE  F6 C9             .dw sample_level01, ...
       02:C9E0  9F CA     
       02:C9E2  40 CB     
       02:C9E4  C9 CB     
       02:C9E6  83 CC     
       02:C9E8  34 CD     
       02:C9EA  B7 CD     
       02:C9EC  4F CE     
       02:C9EE  0F CF     
       02:C9F0  A9 CF     
       02:C9F2  6D D0     
       02:C9F4  31 D1     
  223                     
  224  02:C9F6            sample_level01: 
  225  02:C9F6                    .incbin "levels/tutor01.esx"            
  226  02:CA9F            sample_level02: 
  227  02:CA9F                    .incbin "levels/tutor02.esx"            
  228  02:CB40            sample_level03: 
  229  02:CB40                    .incbin "levels/tutor03.esx"            
  230  02:CBC9            sample_level04: 
  231  02:CBC9                    .incbin "levels/tutor04.esx"            
  232  02:CC83            sample_level05: 
  233  02:CC83                    .incbin "levels/tutor05.esx"            
  234  02:CD34            sample_level06: 
  235  02:CD34                    .incbin "levels/tutor06.esx"            
  236  02:CDB7            sample_level07: 
  237  02:CDB7                    .incbin "levels/tutor07.esx"            
  238  02:CE4F            sample_level08: 
  239  02:CE4F                    .incbin "levels/tutor08.esx"            
  240  02:CF0F            sample_level09: 
  241  02:CF0F                    .incbin "levels/tutor09.esx"            
  242  02:CFA9            sample_level10: 
  243  02:CFA9                    .incbin "levels/tutor10.esx"            
  244  02:D06D            sample_level11: 
  245  02:D06D                    .incbin "levels/tutor11.esx"            
  246  02:D131            sample_level12: 
  247  02:D131                    .incbin "levels/tutor12.esx"            
  248                     
  249                     
  250  02:D209  62 65 67  ds_begin .db    "begin",0
       02:D20C  69 6E 00  
  251  02:D20F  72 6C 65  ds1:    .db     "rledecode",0
       02:D212  64 65 63  
       02:D215  6F 64 65  
       02:D218  00        
  252  02:D219  70 70 75  ds_ppu_off:     .db "ppu_off",0
       02:D21C  5F 6F 66  
       02:D21F  66 00     
  253  02:D221  70 70 75  ds_ppu_on:      .db     "ppu_on",0
       02:D224  5F 6F 6E  
       02:D227  00        
  254  02:D228  72 75 6E  ds_run: .db     "run",0
       02:D22B  00        
  255  02:D22C  61 72 75  ds_antirun:     .db     "arun",0
       02:D22F  6E 00     
  256  02:D231  6E 6D 69  ds_nmi: .db     "nmi",0
       02:D234  00        
  257  02:D235  78 00     ds_x:   .db     "x",0
  258  02:D237  79 00     ds_y:   .db     "y",0
  259  02:D239  69 00     ds_i:   .db     "i",0
  260  02:D23B  74 6D 70  ds_tmpaddr:     .db     "tmp_addr",0
       02:D23E  5F 61 64  
       02:D241  64 72 00  
  261  02:D244  74 69 6C  ds_tiles:       .db     "tiles",0
       02:D247  65 73 00  
  262  02:D24A  64 72 61  ds_draw_guy     .db     "draw_guy",0
       02:D24D  77 5F 67  
       02:D250  75 79 00  
  263  02:D253  6C 6F 61  ds_load_level   .db     "load level",0
       02:D256  64 20 6C  
       02:D259  65 76 65  
       02:D25C  6C 00     
  264  02:D25E  64 72 61  ds_draw_level   .db     "draw level",0
       02:D261  77 20 6C  
       02:D264  65 76 65  
       02:D267  6C 00     
  265                                                     
  266                     ;;; vectors
  267           0003              .bank   3
  268           FFFA              .org    $FFFA
  269  03:FFFA  02 C0             .dw     nmi,start,intr
       03:FFFC  22 C0     
       03:FFFE  00 C0     
  270                     
  271                     
  272           0004              .bank   4
  273                     
  274  04:0000                    .incbin "escape.chr"
  275  04:1000                    .incbin "debug.chr"
