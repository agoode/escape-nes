; mov src, dst
; dst := [src]
mova	.macro
	sta \1
	.endm
movx	.macro
	stx \1
	.endm
movy	.macro
	sty \1
	.endm
mov	.macro
	.if \?1 = ARG_REG
	st\1 \2
	.else
	lda \1
	sta \2
	.endif
	.endm

; mov16 src16, dst16
; dst16 := [src16]

; mov16 #src16, dst16
; dst16 := src16
mov16	.macro
	.if \?1 = ARG_IMMED
	mov #low(\1), \2
	mov #high(\1), \2+1
	.else
	mov \1, \2
	mov \1+1, \2+1
	.endif
	.endm

; mov16 src16, dst16
; dst16 := [src16 + x]
mov16sx	.macro
	lda \1,x
	sta \2
	lda \1+1,x
	sta \2+1
	.endm


; add16 dst16, src16
; dst16 := [dst16] + [src16]

; add16 dst16, #val16
; dst16 := [dst16] + val16
add16	.macro
	clc
	.if \?2 = ARG_IMMED
	lda \1
	adc #low(\2)
	sta \1
	lda \1+1
	adc #high(\2)
	sta \1+1
	.else
	lda \1
	adc \2
	sta \1
	lda \1+1
	adc \2+1
	sta \1+1
	.endif
	.endm

; inc16 dst16
; dst16 := [dst16] + 1
inc16	.macro
	add16 \1, #1
	.endm

; asr16
asl16	.macro
	asl \1+1
	rol \1
	.endm

;; converts pascal style strings to C style
;; src, dst, size
strcpyp2c	.macro
	ldy	#0
	ldx	\3
	beq	.endloop\@
.loop\@:
	lda	[\1], Y
	cmp	#$61
	bmi	.no_upcase\@
	cmp	#$7B
	bpl	.no_upcase\@

	;; upcase
	sec
	sbc	#$20

.no_upcase\@:	
	sta	\2, Y
	iny
	dex
	bne	.loop\@
.endloop\@:
	mov	#0, \2, Y
	.endm

debug .equ 0
debug_num .macro
	.if	debug
	sta	debug_port
	.endif
	.endm
	
debug_p	.macro
	.if	debug
	pha
	txa
	pha
	ldx	#0
.start\@:
	lda	\1, X
	beq	.done\@
	sta	debug_str
	inx
	jmp	.start\@
.done\@:
	lda	#$0a
	sta	debug_str
	pla
	tax
	pla
	.endif
	.endm


; some ppu stuff
bgpal	.equ $3f00
bgnam	.equ $2020

ppua	.macro
	.if \?1 = ARG_IMMED
	mov #high(\1), $2006
	mov #low(\1), $2006
	.else
	mov \1+1, $2006
	mov \1, $2006
	.endif
	.endm

ppuw	.macro
	mov \1, $2007
	.endm



draw_text_as_sprites:	.macro
	ldx	#0

.start\@:
	clc
	txa
	asl	A
	asl	A
	tay
	
	lda	\1, X
	beq	.done\@
	adc	#$80
	sta	sprite+33, Y

	lda	#$30
	sta	sprite+32, Y

	lda	#1
	sta	sprite+34, Y

	tya
	asl	A
	adc	#$60
	sta	sprite+35, Y

	inx
	jmp	.start\@

.done\@:
	
	.endm
